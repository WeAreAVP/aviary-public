{"version":3,"sources":["App.js","serviceWorker.js","util/timecode-converter/src/secondsToTimecode.js","util/timecode-converter/src/timecodeToSeconds.js","util/timecode-converter/src/padTimeToTimecode.js","util/timecode-converter/index.js","util/downlaod/index.js","util/ibmwatson-to-dpe/index.js","util/dpe-to-slate/index.js","util/vtt-to-dpe/index.js","util/inline-interval-timecodes/index.js","util/pluk/index.js","util/export-adapters/subtitles-generator/list.js","util/count-words/index.js","util/export-adapters/txt/index.js","util/export-adapters/slate-to-dpe/update-timestamps/update-timestamps-helper.js","util/export-adapters/slate-to-dpe/update-timestamps/index.js","util/export-adapters/slate-to-dpe/index.js","util/export-adapters/docx/index.js","util/export-adapters/subtitles-generator/compose-subtitles/util/format-seconds.js","util/export-adapters/subtitles-generator/presegment-text/text-segmentation/index.js","util/export-adapters/subtitles-generator/presegment-text/line-break-between-sentences/index.js","util/export-adapters/subtitles-generator/presegment-text/util/remove-space-after-carriage-return.js","util/export-adapters/subtitles-generator/presegment-text/fold/index.js","util/export-adapters/subtitles-generator/presegment-text/util/remove-space-at-beginning-of-line.js","util/export-adapters/subtitles-generator/presegment-text/divide-into-two-lines/index.js","util/export-adapters/subtitles-generator/presegment-text/index.js","util/export-adapters/subtitles-generator/compose-subtitles/util/escape-text.js","util/export-adapters/subtitles-generator/compose-subtitles/premiere.js","util/export-adapters/subtitles-generator/compose-subtitles/util/tc-format.js","util/export-adapters/subtitles-generator/compose-subtitles/itt.js","util/export-adapters/subtitles-generator/compose-subtitles/ttml.js","util/export-adapters/subtitles-generator/compose-subtitles/srt.js","util/export-adapters/subtitles-generator/compose-subtitles/vtt.js","util/export-adapters/subtitles-generator/compose-subtitles/csv.js","util/export-adapters/subtitles-generator/index.js","util/export-adapters/index.js","util/is-empty/index.js","util/dpe-to-slate/generate-previous-timings-up-to-current/index.js","util/languages.js","components/media-component.js","components/index.js","index.js"],"names":["App","props","loadTranscript","params","fetch","atob","transcript","then","res","json","result","url","media_url","env","host","data","sst_type","JSON","parse","setState","transcriptData","mediaUrl","title","sttType","isLoaded","aviaryUrl","resourceTitle","resource_title","metadata","error","save","value","saveTranscript","saveAndClose","saveTranscriptTitle","newTitle","saveMetadata","a","formEdit","file_transcript","is_edit","is_caption","isCaption","is_public","isPublic","is_downloadable","isDownloadable","description","language","requestOptions","method","headers","body","stringify","state","response","NotificationManager","success","close","slatejs","speakers","compressedData","pako","gzip","to","_result","window","cancelEditRequest","confirm","handleAutoSaveChanges","newAutoSaveData","isTextEditable","spellCheck","analyticsEvents","fileName","autoSaveData","autoSaveContentType","autoSaveExtension","editorRef","React","createRef","bind","queryString","location","search","localStorage","setItem","this","document","addEventListener","event","preventDefault","onbeforeunload","undefined","className","handleSaveEditor","handleSaveAndClose","handleSaveTranscriptTitle","isEditable","showTitle","mediaRef","Component","Boolean","hostname","match","secondsToTimecode","seconds","framePerSeconds","fps","normalisedSeconds","Number","Math","floor","toPrecision","toFixed","normalisePlayerTime","wholeSeconds","frames","_padZero","n","parseInt","timecodeToSecondsHelper","tc","s","split","timecodeToFrames","isOneDigit","str","length","padTimeToTimecode","time","timecode","includes","includesFullStop","replace","timecodeToSeconds","resultPadded","parseFloat","shortTimecode","slice","download","content","filename","contentType","type","link","createElement","blob","Blob","href","URL","createObjectURL","appendChild","click","removeChild","searchSpeakerLabelsByToAndFromPair","array","from","Array","isArray","TypeError","filter","obj","get2DWordsList","speakerLabels","map","alternatives","alt","timestamps","timestamp","IBMWord","text","start","end","speaker","normalizeWord","convertIBMWatsonToDpe","results","results_array","speaker_labels","wordList2d","flat","paragraphs","transcripts","forEach","index","push","normalizeParagraph","getParagraphs","words","generateText","paragraph","word","w","join","generateTotalTimings","keys","generatePreviousTimingsUpToCurrentOne","totalTimingsInt","splice","convertDpeToSlate","Object","previousTimings","startTimecode","children","DPETranscript","Error","webvtt","lines","dpeTranscription","convertTimeToSeconds","hours","minutes","line","timeMatch","startTime","endTime","speakerMatch","trim","wordsArray","wordDuration","wordIndex","convertVttToDpe","insertTimecodesInline","intervalSeconds","lastInsertTime","sortedWords","sort","b","newWords","pluck","key","Set","subtitlesExportOptionsList","label","ext","countWords","slateToText","timecodes","atlasFormat","Node","string","toUpperCase","updateTimestampsHelper","currentContent","currentText","alignSTT","updateTimestamps","newEntities","updatedBlockArray","totalWords","blockIndex","block","wordsInBlock","blockEntites","updatedBlock","createSlateContentFromSlateJsParagraphs","converSlateToDpe","alignedWords","createDpeParagraphsFromSlateJs","slateToDocx","inlineTimecodes","hideTitle","creator","doc","Document","textTitle","TextRun","paragraphTitle","Paragraph","addRun","heading1","center","addParagraph","paragraphEmpty","slateParagraph","paragraphSpeakerTimecodes","timecodeStartTime","bold","tab","paragraphContents","textBreak","break","paragraphText","Packer","toBlob","formatSeconds","Date","toISOString","substr","textSegmentation","honorifics","optionalHonorifics","options","newline_boundaries","html_boundaries","sanitize","allowed_tags","abbreviations","tokenizer","sentences","addLineBreakBetweenSentences","removeSpaceAfterCarriageReturn","foldWords","foldNumber","textArray","counter","list","nextElementLength","foldWordsReturnArray","r","removeSpaceAtBeginningOfLine","divideIntoTwoLines","l","getTextFromWordsList","preSegmentText","textInput","tmpNumberOfCharPerLine","segmentedText","textWithLineBreakBetweenSentences","foldedText","textDividedIntoTwoLines","AMP_REGEX","LT_REGEX","GT_REGEX","escapeText","ttmlGeneratorPremiere","vttJSON","ttmlOut","v","tcFormat","FPS","TC","round","toString","ittGenerator","lang","ittOut","ttmlGenerator","srtGenerator","srtOut","i","vttGenerator","vttOut","csvGenerator","srtJsonContent","srtLineO","segmentedTextToList","addTimecodesToLines","wordsList","startWordCounter","endWordCounter","jsonLine","possibleParagraphs","p","pctInParagraph","min","segmentTextByParagraph","wordList","p_id","sorted_paragraphs","foundParagraph","id","subtitlesComposer","numberOfCharPerLine","subtitlesJson","paragraphMode","segmentedTextArray","preSegmentTextJson","captionTypeList","exportAdapter","slateValue","transcriptTitle","dpeTranscriptData","isCaptionType","editorContent","subtitlesGenerator","console","isEmpty","generatePreviousTimingsUpToCurrent","currentTime","transcriptDataSlateValue","lastWordStartTime","lastWordStartTimeInt","emptyListOfTimes","languagesArray","YouTubePlayer","videoId","width","height","src","frameBorder","allowFullScreen","extractVideoId","videoIdMatch","MediaComponent","isYouTube","ref","controls","playsInline","PLAYBACK_RATE_VALUES","SlateTranscriptEditor","useState","setCurrentTime","setDuration","playbackRate","setPlaybackRate","editor","useMemo","withReact","withHistory","createEditor","setValue","defaultShowSpeakersPreference","showSpeakers","defaultShowTimecodesPreference","showTimecodes","setShowSpeakers","setSpeakerOptions","showSpeakersCheatShet","saveTimer","setSaveTimer","isPauseWhiletyping","setIsPauseWhiletyping","isProcessing","setIsProcessing","isContentModified","setIsContentIsModified","findContent","setFindContent","replaceContent","setReplaceContent","setDescription","setLanguage","setIsPublic","setIsCaption","setIsDownloadable","useEffect","style","cursor","transcriptDataLive","nodes","selection","positionLastNode","Transforms","insertNodes","at","uniqueSpeakers","getUniqueSpeakers","current","handleTimeUpdated","removeEventListener","duration","getFileTitle","path","basename","getMediaType","clipExt","extname","tmpMediaType","mediaType","e","target","renderElement","useCallback","element","TimedTextElement","DefaultElement","decorate","node","ranges","Text","isText","parts","offset","part","anchor","focus","highlight","handleSetSpeakerName","pathToCurrentNode","ReactEditor","findPath","oldSpeakerName","createAccessibleDialog","newSpeakerName","textWithSpeakers","textWithoutSpeakers","toLowerCase","rangeForTheWholeEditor","Editor","range","setNodes","maxSpeakerLength","findLongestSpeakerNameLength","minWidth","querySelectorAll","message","defaultValue","displayInput","Promise","resolve","dialogContainer","setAttribute","position","top","left","transform","backgroundColor","padding","zIndex","messageElement","textContent","inputField","okButton","cancelButton","handleTimeCodeEdit","oldTimeCode","newTimeCode","timeCodeFormatRegex","test","alert","Row","attributes","textAlign","dir","Col","contentEditable","onClick","handleTimedTextClick","data-start","OverlayTrigger","delay","placement","overlay","Tooltip","icon","faEdit","onKeyDown","handleTimeCodeEditKeyPress","pull","tabIndex","role","aria-label","overflow","textOverflow","whiteSpace","maxWidth","textTransform","fontStyle","handleSetSpeakerNameKeyPress","maxLength","speakerObj","classList","contains","dataset","play","slateString","parentNode","handleRestoreTimecodes","alignedSlateData","handleExport","isDownload","tmpValue","editorContnet","handleSave","format","Container","fluid","paddingTop","scoped","onBlur","keycode","innerHTML","Form","xs","sm","md","lg","xl","Group","controlId","Control","as","placeholder","onChange","Button","variant","newText","newChild","removeNodes","replaceAll","span","order","marginRight","tmpNewPlaybackRateValue","playbackRateValue","faUndo","marginLeft","DropdownButton","disabled","faFileDownload","Dropdown","Item","color","disable","Divider","faSave","faPause","Tabs","defaultActiveKey","Tab","eventKey","Label","rows","resize","code","Check","checked","readOnly","renderLeaf","leaf","onDoubleClick","css","parent","data-previous-timings","pause","clearTimeout","tmpSaveTimer","setTimeout","onKeyUp","keyCode","wordLength","newStart","newTimecode","defaultProps","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4ed2c381.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport queryString from \"query-string\";\nimport \"react-notifications/lib/notifications.css\";\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from \"react-notifications\";\nimport SlateTranscriptEditor from './index.js';\nimport 'bootstrap-css-only';\nimport pako from 'pako';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      transcriptData: null,\n      mediaUrl: null,\n      isTextEditable: true,\n      spellCheck: true,\n      sttType: null,\n      analyticsEvents: [],\n      title: \"\",\n      resourceTitle: \"\",\n      fileName: \"\",\n      autoSaveData: {},\n      autoSaveContentType: \"slate\",\n      autoSaveExtension: \"json\",\n      isLoaded: false,\n      error: false,\n      aviaryUrl: \"\",\n      formEdit: false,\n      metadata: {},\n    };\n    this.editorRef = React.createRef();\n    this.cancelEditRequest = this.cancelEditRequest.bind(this);\n    this.loadTranscript = this.loadTranscript.bind(this);\n    this.handleAutoSaveChanges = this.handleAutoSaveChanges.bind(this);\n    this.save = this.save.bind(this);\n  }\n  componentDidMount() {\n    const params = queryString.parse(window.location.search);\n    localStorage.setItem(\"transcript_finish\", false);\n    if (typeof params.transcript != \"undefined\") {\n      this.loadTranscript(params);\n    } else {\n      this.setState({\n        isLoaded: true,\n        error: true,\n      });\n    }\n    document.addEventListener(\"contextmenu\", (event) => event.preventDefault());\n\n    window.addEventListener(\"unload\", async function (event) {\n      localStorage.setItem(\"transcript_finish\", true);\n    });\n  }\n  componentDidUpdate() {\n    if (this.state.formEdit) {\n      window.onbeforeunload = () => true;\n    } else {\n      window.onbeforeunload = undefined;\n    }\n  }\n  loadTranscript = (params) => {\n    try {\n      fetch(atob(params.transcript))\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            let url = result.media_url;\n            if (!result.env) {\n              url = result.host + result.media_url;\n            }\n            let data = result.transcript;\n            if (result.sst_type === 'ibm' || result.sst_type === 'slatejs') {\n              data = JSON.parse(data);\n            } \n            this.setState({\n              transcriptData: data,\n              mediaUrl: url,\n              title: result.title,\n              sttType: result.sst_type,\n              isLoaded: true,\n              aviaryUrl: atob(params.transcript),\n              resourceTitle: result.resource_title,\n              metadata: result.metadata,\n            });\n          },\n          (error) => {\n            this.setState({\n              isLoaded: true,\n              error: true,\n            });\n          }\n        );\n    } catch (error) {\n      this.setState({\n        isLoaded: true,\n        error: true,\n      });\n    }\n  };\n  save = (value) => {\n    this.saveTranscript(value);\n  };\n\n  saveAndClose = (value) => {\n    this.saveTranscript(value, true);\n  };\n\n  saveTranscriptTitle = (newTitle) => {\n    this.setState({\n      title: newTitle\n    });\n  };\n\n  saveMetadata = async (metadata) => {\n    this.setState({\n      formEdit: false,\n    });\n    let transcript = {\n      file_transcript: {\n        is_edit: false,\n        is_caption: metadata.isCaption,\n        is_public: metadata.isPublic,\n        is_downloadable: metadata.isDownloadable,\n        description: metadata.description,\n        language: metadata.language,\n      },\n    };\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(transcript),\n    };\n    await fetch(this.state.aviaryUrl + \".json\", requestOptions)\n      .then((response) => response.json())\n      .then((result) => {\n        NotificationManager.success(\"\", \"Transcript Metadata saved successfully.\", 3000);\n      });\n  };\n\n  saveTranscript = async (value, close=false) => {\n    this.setState({\n      formEdit: false,\n    });\n\n    const currentContent = value;\n\n    let transcript = {\n      file_transcript: {\n        slatejs: currentContent,\n        is_edit: false,\n        title: this.state.title\n      },\n      speakers: ['allison', 'watson'],\n    };\n    // Convert and compress the transcript\n    const compressedData = pako.gzip(JSON.stringify(transcript), { to: 'string' });\n\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Encoding\": \"gzip\" },\n      body: compressedData,\n    };\n\n    await fetch(this.state.aviaryUrl + \".json\", requestOptions)\n      .then((response) => response.json())\n      .then((_result) => {\n        NotificationManager.success(\"\", \"Transcript saved successfully.\", 3000);\n        if (close){\n          window.close();\n        }\n      });\n  };\n\n  cancelEditRequest = async () => {\n    let r = false;\n    if (this.state.formEdit) {\n      r = window.confirm(\n        \"Changes that you made may not be saved. Are you sure you want to cancel?\"\n      );\n    } else {\n      r = true;\n    }\n\n    if (r === true) {\n      this.setState({\n        formEdit: false,\n      });\n      let transcript = {\n        file_transcript: {\n          is_edit: false,\n        },\n      };\n      const requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(transcript),\n      };\n      await fetch(this.state.aviaryUrl + \".json\", requestOptions)\n        .then((response) => response.json())\n        .then((result) => {\n          window.close();\n        });\n    }\n  };\n  handleAutoSaveChanges = (newAutoSaveData) => {\n    this.setState({\n      formEdit: true,\n    });\n    // const { data, ext } = newAutoSaveData;\n    // this.setState({ autoSaveData: data, autoSaveExtension: ext });\n    // Saving to local storage\n    // localSave(this.state.mediaUrl, this.state.fileName, data);\n  };\n  render() {\n    if (this.state.isLoaded && !this.state.error) {\n      return (\n        <div className=\"App\">\n          <section className=\"ml-lg-3\">\n            <SlateTranscriptEditor\n              mediaUrl={this.state.mediaUrl}\n              transcriptData={this.state.transcriptData}\n              handleSaveEditor={this.save}\n              handleSaveAndClose={this.saveAndClose}\n              handleSaveTranscriptTitle={this.saveTranscriptTitle}\n              isEditable={this.state.isTextEditable}\n              title={this.state.title}\n              resourceTitle={this.state.resourceTitle}\n              autoSaveContentType='slate'\n              showTitle={true}\n              mediaRef={this.editorRef}\n              sttType={this.state.sttType}\n              metadata={this.state.metadata}\n              saveMetadata={this.saveMetadata}\n            />\n          </section>\n          <NotificationContainer />\n        </div>\n      );\n    } else if (!this.state.isLoaded) {\n      return (\n        <div className=\"loader-container\">\n          <div className=\"loader\"></div>\n          <span className=\"loader-text\">Please wait while the transcript is being loaded...</span>\n        </div>\n      );\n    } else {\n      return (\n        <div> Transcript does not exist or you don't have the permission to access it. </div>\n      );\n    }\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\n * Raised in this comment https://github.com/bbc/react-transcript-editor/pull/9\n * abstracted from https://github.com/bbc/newslabs-cdn/blob/master/js/20-bbcnpf.utils.js\n * In broadcast VIDEO, timecode is NOT hh:mm:ss:ms, it's hh:mm:ss:ff where ff is frames,\n * dependent on the framerate of the media concerned.\n * `hh:mm:ss:ff`\n */\n\n/**\n * Helper function\n * Rounds to the 14milliseconds boundaries\n * Time in video can only \"exist in\" 14milliseconds boundaries.\n * This makes it possible for the HTML5 player to be frame accurate.\n * @param {*} seconds\n * @param {*} fps\n */\nconst normalisePlayerTime = function(seconds, fps) {\n  return Number(((1.0 / fps) * Math.floor(Number((fps * seconds).toPrecision(12)))).toFixed(2));\n};\n\n/*\n * @param {*} seconds\n * @param {*} fps\n */\nconst secondsToTimecode = function(seconds, framePerSeconds) {\n  // handle edge case, trying to convert zero seconds\n  if (seconds === 0) {\n    return '00:00:00:00';\n  }\n  // written for PAL non-drop timecode\n  let fps = 25;\n  if (framePerSeconds !== undefined) {\n    fps = framePerSeconds;\n  }\n\n  const normalisedSeconds = normalisePlayerTime(seconds, fps);\n\n  const wholeSeconds = Math.floor(normalisedSeconds);\n  const frames = ((normalisedSeconds - wholeSeconds) * fps).toFixed(2);\n\n  // prepends zero - example pads 3 to 03\n  function _padZero(n) {\n    if (n < 10) return `0${parseInt(n)}`;\n\n    return parseInt(n);\n  }\n\n  return `${_padZero((wholeSeconds / 60 / 60) % 60)}:${_padZero((wholeSeconds / 60) % 60)}:${_padZero(wholeSeconds % 60)}:${_padZero(frames)}`;\n};\n\nexport default secondsToTimecode;\n","/**\n * Helperf unction\n * @param {*} tc\n * @param {*} fps\n */\nconst timecodeToFrames = function(tc, fps) {\n  // TODO make 29.97 fps drop-frame aware - works for 25 only.\n\n  const s = tc.split(':');\n  let frames = parseInt(s[3]);\n  frames += parseInt(s[2]) * fps;\n  frames += parseInt(s[1]) * (fps * 60);\n  frames += parseInt(s[0]) * (fps * 60 * 60);\n\n  return frames;\n};\n\n/**\n * Convert broadcast timecodes to seconds\n * @param {*} tc - `hh:mm:ss:ff`\n * @param {*} framePerSeconds - defaults to 25 if not provided\n */\nconst timecodeToSecondsHelper = function(tc, framePerSeconds) {\n  let fps = 25;\n  if (framePerSeconds !== undefined) {\n    fps = framePerSeconds;\n  }\n  const frames = timecodeToFrames(tc, fps);\n\n  return Number(Number(frames / fps).toFixed(2));\n};\n\nexport default timecodeToSecondsHelper;\n","const countColon = timecode => timecode.split(':').length;\n\nconst includesFullStop = timecode => timecode.includes('.');\n\nconst isOneDigit = str => str.length === 1;\n\nconst padTimeToTimecode = time => {\n  if (typeof time === 'string') {\n    switch (countColon(time)) {\n      case 4:\n        // is already in timecode format\n        // hh:mm:ss:ff\n        return time;\n      case 2:\n        // m:ss\n        if (isOneDigit(time.split(':')[0])) {\n          return `00:0${time}:00`;\n        }\n\n        return `00:${time}:00`;\n      case 3:\n        // hh:mm:ss\n        return `${time}:00`;\n      default:\n        // mm.ss\n        if (includesFullStop(time)) {\n          // m.ss\n          if (isOneDigit(time.split('.')[0])) {\n            return `00:0${time.split('.')[0]}:${time.split('.')[1]}:00`;\n          }\n\n          return `00:${time.replace('.', ':')}:00`;\n        }\n\n        // if just int, then it's seconds\n        // s\n        if (isOneDigit(time)) {\n          return `00:00:0${time}:00`;\n        }\n\n        return `00:00:${time}:00`;\n    }\n    // edge case if it's number return a number coz cannot refactor\n    // TODO: might need to refactor and move this elsewhere\n  } else {\n    return time;\n  }\n};\n\nexport default padTimeToTimecode;\n","/**\n * Wrapping around \"time stamps\" and timecode conversion modules\n * To provide more support for variety of formats.\n */\nimport secondsToTimecode from './src/secondsToTimecode';\nimport timecodeToSecondsHelper from './src/timecodeToSeconds';\nimport padTimeToTimecode from './src/padTimeToTimecode';\n\n/**\n * @param {*} time\n * Can take as input timecodes in the following formats\n * - hh:mm:ss:ff\n * - mm:ss\n * - m:ss\n * - ss - seconds --> if it's already in seconds then it just returns seconds\n * - hh:mm:ff\n * @todo could be refactored with some helper functions for clarity\n */\nconst timecodeToSeconds = time => {\n  if (typeof time === 'string') {\n    const resultPadded = padTimeToTimecode(time);\n    const resultConverted = timecodeToSecondsHelper(resultPadded);\n\n    return resultConverted;\n  }\n\n  // assuming it receive timecode as seconds as string '600'\n  return parseFloat(time);\n};\n\nconst shortTimecode = time => {\n  // handle edge case if it's zero, then just return shorter timecode\n  if (time === 0) {\n    return '00:00:00';\n  } else {\n    const timecode = secondsToTimecode(time);\n    return timecode.slice(0, -3);\n  }\n};\n\nexport { secondsToTimecode, timecodeToSeconds, shortTimecode };\n","// https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file\nconst download = (content, filename, contentType) => {\n  const type = contentType || 'application/octet-stream';\n  const link = document.createElement('a');\n  const blob = new Blob([content], { type: type });\n\n  link.href = window.URL.createObjectURL(blob);\n  link.download = filename;\n  // Firefox fix - cannot do link.click() if it's not attached to DOM in firefox\n  // https://stackoverflow.com/questions/32225904/programmatical-click-on-a-tag-not-working-in-firefox\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\nexport default download;\n","/**\n * This file provides functions to convert IBM Watson transcript data into a standardized format.\n * It processes the transcript data, extracts and organizes words and paragraphs, and associates\n * speakers with their respective spoken words.\n */\n\n/**\n * Searches for a matching speaker label based on the 'from' and 'to' timestamps.\n *\n * @param {Object[]} array - The array of speaker labels.\n * @param {number} from - The starting timestamp to match.\n * @param {number} to - The ending timestamp to match.\n * @returns {Object} - The matching speaker label object.\n */\nfunction searchSpeakerLabelsByToAndFromPair(array, from, to) {\n  if (!Array.isArray(array)) {\n    throw new TypeError('The first argument must be an array.');\n  }\n\n  return array.filter(obj => obj['to'] === to && obj['from'] === from)[0];\n}\n\n/**\n * Normalizes a word entry from IBM Watson transcript data.\n *\n * @param {Array} IBMWord - An array representing a word [text, start, end].\n * @param {Object[]} speakerLabels - An array of speaker labels.\n * @returns {Object} - A normalized word object.\n */\nfunction normalizeWord(IBMWord, speakerLabels) {\n  if (!Array.isArray(IBMWord) || IBMWord.length < 3) {\n    throw new TypeError('Expected IBMWord to be an array with at least three elements');\n  }\n\n  const [text, start, end] = IBMWord;\n  const speaker = speakerLabels\n      ? searchSpeakerLabelsByToAndFromPair(speakerLabels, start, end)['speaker']\n      : null;\n\n  return { start, end, text, speaker };\n}\n\n/**\n * Converts a result entry into a 2D list of normalized words.\n *\n * @param {Object} result - A result entry from IBM Watson transcript data.\n * @param {Object[]} speakerLabels - An array of speaker labels.\n * @returns {Array} - A 2D list of normalized words.\n */\nfunction get2DWordsList(result, speakerLabels) {\n  if (!Array.isArray(result)) {\n    throw new TypeError('Expected result to be an array');\n  }\n  return result.map(({ alternatives }) => (\n      alternatives.map(alt => (\n          alt.timestamps.map(timestamp => (\n              normalizeWord(timestamp, speakerLabels)\n          ))\n      ))\n  ));\n}\n\n/**\n * Organizes a 2D list of words into paragraphs.\n *\n * @param {Array} wordList2d - A 2D list of words.\n * @returns {Object[]} - An array of paragraph objects.\n */\nfunction getParagraphs(transcripts) {\n  if (!Array.isArray(transcripts) || transcripts.length === 0) {\n    return [];\n  }\n\n  const results = [];\n\n  transcripts.forEach((transcript) => {\n    let from = transcript['alternatives'][0]['timestamps'][0][1];\n    let to = transcript['alternatives'][0]['timestamps'][transcript['alternatives'][0]['timestamps'].length - 1][2];\n    results.push({start: from, end: to, speaker: 'Add speaker'});\n  });\n\n  return results;\n}\n\n/**\n * Normalizes paragraphs from IBM Watson speaker labels.\n *\n * @param {Object[]} IBMparagraphs - An array of speaker labels.\n * @returns {Object[]} - An array of normalized paragraph objects.\n */\nfunction normalizeParagraph(transcripts, speakerLabels) {\n  if (!Array.isArray(transcripts) || transcripts.length === 0) {\n    return [];\n  }\n\n  const results = [];\n\n  transcripts.forEach((transcript, index) => {\n    let from = transcript['alternatives'][0]['timestamps'][0][1];\n    let to = transcript['alternatives'][0]['timestamps'][transcript['alternatives'][0]['timestamps'].length - 1][2];\n    let speaker = searchSpeakerLabelsByToAndFromPair(speakerLabels, from, transcript['alternatives'][0]['timestamps'][0][2])['speaker'];\n    results.push({start: from, end: to, speaker: speaker});\n  });\n\n  return results;\n}\n\n/**\n * Converts IBM Watson transcript data to a standardized format.\n *\n * @param {Object} transcript - The IBM Watson transcript data.\n * @returns {Object} - An object containing an array of paragraphs and an array of words.\n */\nfunction convertIBMWatsonToDpe(transcript) {\n  const { results } = transcript;\n  const results_array = results[0].results || results\n  let speakerLabels = transcript.speaker_labels || transcript.results[0].speaker_labels\n  speakerLabels = speakerLabels && speakerLabels.length > 0 ? speakerLabels : null;\n  let wordList2d = get2DWordsList(results_array, speakerLabels);\n  if (Array.isArray(wordList2d[0][0])) {\n    wordList2d = wordList2d.flat()\n  }\n  let paragraphs = [];\n  if (speakerLabels) {\n    paragraphs = normalizeParagraph(results_array, speakerLabels);\n  } else {\n    paragraphs = getParagraphs(results_array);\n  }\n\n  return {\n    paragraphs: paragraphs.flat(),\n    words: wordList2d.flat().flat(),\n  };\n}\n\nexport { convertIBMWatsonToDpe };\n","import { shortTimecode } from '../timecode-converter/index';\nimport { convertIBMWatsonToDpe } from '../ibmwatson-to-dpe/index'\nimport { convertVttToDpe } from '../vtt-to-dpe/index'\n/**\n *\n * `generatePreviousTimings` and `generatePreviousTimingsUpToCurrent`\n * are used to add a `previousTimings` data attribute\n * to the paragraph `TimedTextElement` in `renderElement`\n * This makes it possible to do css injection to hilight current timings\n * `.timecode[data-previous-timings*=\"${listOfPreviousTimingsUpToCurrentOne}\"]\n *\n * where `listOfPreviousTimingsUpToCurrentOne` is dinamically generated up to the current one.\n * eg if current time is `3` then `listOfPreviousTimingsUpToCurrentOne` \"0 1 2\"\n */\n\n//  TODO: should it consolidate generatePreviousTimingsUpToCurrent or are they for different porpuses?\n//  import generatePreviousTimingsUpToCurrent from './generate-previous-timings-up-to-current';\n\n/**\n * Generate a list of times, each rounded up to int.\n * from zero to the provided `time`.\n * eg if `time` is 6, the list would be [0, 1, 2, 3, 4, 5]\n * @param {Number} time - float, time in seconds\n */\n\nexport const generatePreviousTimings = (time) => {\n  // https://stackoverflow.com/questions/3746725/how-to-create-an-array-containing-1-n\n  if (time) {\n    return [...Array(parseInt(time)).keys()];\n  } else {\n    return [0];\n  }\n};\n\n/**\n * splices a list of times, int, up to a certain, index current time.\n * eg  `totalTimingsInt` is [0, 1, 2, 3, 4, 5] and `time` is 3, it retusn \"0 1 2\"\n * then it returns\n * @param {Array} totalTimingsInt -  list of timings int, generated with `generatePreviousTimings`\n * @param {Number} time - float, time in seconds\n * @returns {String}\n */\n\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\nconst generateText = (paragraph, words) => {\n  return words\n    .filter((word) => word.start >= paragraph.start && word.end <= paragraph.end)\n    .map((w) => w.text)\n    .join(' ');\n};\n\nconst generatePreviousTimingsUpToCurrent = (totalTimingsInt, time) => {\n  return totalTimingsInt.splice(0, time, 0).join(' ');\n};\n\nconst generateTotalTimings = (words) => {\n  return generatePreviousTimings(words[words.length - 1].start);\n};\n\nexport const generatePreviousTimingsUpToCurrentOne = (words, start) => {\n  return generatePreviousTimingsUpToCurrent(generateTotalTimings(words), start);\n};\n\nconst convertDpeToSlate = (transcript, sttType) => {\n  if (isEmpty(transcript)) {\n    return [\n      {\n        speaker: 'U_UKN',\n        start: 0,\n        previousTimings: '0',\n        startTimecode: '00:00:00',\n        type: 'timedText',\n        children: [\n          {\n            text: 'Text',\n            // Adding list of words in slateJs paragraphs\n            words: [],\n          },\n        ],\n      },\n    ];\n  }\n  \n  // Transcript is converted to DPE format first and then converted to Slate format\n  // so that it can be used in slateJs.\n  let DPETranscript = {}\n  if (sttType === 'ibm') {\n    DPETranscript = convertIBMWatsonToDpe(transcript);\n  } else if (sttType === 'vtt') {\n    DPETranscript = convertVttToDpe(transcript); \n  } else if (sttType === 'slatejs') {\n    return transcript;\n  } else {\n    throw new Error('Invalid sttType');\n  }\n\n  const { words, paragraphs } = DPETranscript;\n\n  let result = paragraphs.map((paragraph) => ({\n    speaker: paragraph.speaker,\n    start: paragraph.start,\n    previousTimings: generatePreviousTimingsUpToCurrentOne(words, paragraph.start),\n    // pre-computing the display of the formatting here so that it doesn't need to convert it in leaf render\n    startTimecode: shortTimecode(paragraph.start),\n    type: 'timedText',\n    children: [\n      {\n        text: generateText(paragraph, words),\n        // Adding list of words in slateJs paragraphs\n      },\n    ],\n  }));\n  result[0]['children'][0].words = words\n  return result;\n};\n\nexport default convertDpeToSlate;\n","function convertVttToDpe(webvtt) {\n  const lines = webvtt.split('\\n');\n\n  let dpeTranscription = {\n    paragraphs: [],\n    words: []\n  };\n\n  lines.forEach((line, index) => {\n    if (line.includes('-->')) {\n      const timeMatch = line.match(/(\\d{2}:\\d{2}:\\d{2}.\\d{3}) --> (\\d{2}:\\d{2}:\\d{2}.\\d{3})/);\n      const startTime = timeMatch ? convertTimeToSeconds(timeMatch[1]) : 0;\n      const endTime = timeMatch ? convertTimeToSeconds(timeMatch[2]) : 0;\n      const speakerMatch = lines[index + 1] && lines[index + 1].match(/<v ([a-zA-Z0-9]+)>/);\n      const speaker = speakerMatch ? speakerMatch[1] : 'Add speaker';\n      const content = lines[index + 1] && lines[index + 1].replace(/<[^>]*>/g, '').trim();  // Remove HTML tags and trailing spaces\n    \n      dpeTranscription.paragraphs.push({start: startTime, end: endTime, speaker: speaker});\n      // Split content into words and add to the words array\n      const wordsArray = content && content.split(' ');\n      const wordDuration = (endTime - startTime) / (wordsArray ? wordsArray.length : 1);\n      const words = wordsArray && wordsArray.map((word, wordIndex) => ({\n          start: startTime + (wordIndex * wordDuration),\n          end: startTime + ((wordIndex + 1) * wordDuration),\n          text: word,\n          speaker\n      }));\n\n      dpeTranscription.words.push(...(words || []));\n    }\n  });\n\n  function convertTimeToSeconds(time) {\n    const [hours, minutes, seconds] = time.split(':').map(Number);\n    return hours * 3600 + minutes * 60 + parseFloat(seconds);\n  }\n\n  return dpeTranscription;\n}\n\nexport { convertVttToDpe };","import { shortTimecode } from '../timecode-converter';\n/**\n * Helper function for OHMS format\n * OHMS is an open source indexing tool created by the University of Kentucky,\n * which is used by a number of cultural heritage institutions.\n * OHMS uses xml for the the index and a Word doc for the transcript\n * with timecodes at 30 second or 60 second intervals written in-line in the format of [hh:mm:ss]\n * `slate-transcript-editor` OHMS export option exports the word part.\n * Thi functions organises the words to add timecodes intervals at the required times.\n */\nconst insertTimecodesInline = ({ intervalSeconds = 30, transcriptData }) => {\n  let lastInsertTime = 0;\n\n  const sortedWords = transcriptData.words.sort((a, b) => a.start - b.start);\n\n  let newWords = [];\n  for (const word of sortedWords) {\n    if (word.start - lastInsertTime > intervalSeconds) {\n      lastInsertTime = Math.floor(word.start / intervalSeconds) * intervalSeconds;\n      const timecode = shortTimecode(lastInsertTime);\n      newWords.push({ start: word.start, end: word.start + (word.end - word.start) / 2, text: `[${timecode}]` });\n      word.start = word.start + (word.end - word.start) / 2;\n    }\n    newWords.push(word);\n  }\n  return {\n    ...transcriptData,\n    words: newWords,\n  };\n};\nexport default insertTimecodesInline;\n","/*\n * Pluck Unique Values from Array of Javascript Objects\n * https://gist.github.com/JamieMason/bed71c73576ba8d70a4671ea91b6178e\n */\nconst pluck = key => array => Array.from(new Set(array.map(obj => obj[key])));\n\nexport default pluck;\n","const subtitlesExportOptionsList = [\n  { type: 'srt', label: 'Srt', ext: 'srt' },\n  { type: 'vtt', label: 'VTT', ext: 'vtt' },\n  { type: 'vtt_speakers', label: 'VTT with speakers', ext: 'vtt' },\n  { type: 'itt', label: 'iTT', ext: 'itt' },\n  { type: 'ttml', label: 'TTML', ext: 'ttml' },\n  { type: 'premiereTTML', label: 'TTML for Adobe Premiere', ext: 'ttml' },\n  { type: 'csv', label: 'CSV', ext: 'csv' },\n  { type: 'pre-segment-txt', label: 'Pre segmented txt', ext: 'txt' },\n  { type: 'json', label: 'Json', ext: 'json' },\n];\n\nexport default subtitlesExportOptionsList;\n","const countWords = (text) => {\n  // return text.trim().replace(/\\n /g, '').replace(/\\n/g, ' ').split(' ').length;\n  // Don't count multiple spaces as multiple words\n  // https://www.w3schools.com/jsref/jsref_regexp_whitespace.asp\n  // Do a global search for whitespace characters in a string\n  return text.trim().replace(/\\s\\s+/g, ' ').split(' ').length;\n};\n\nexport default countWords;\n","/**\n * Convert Slate editor contnet to plain text without timecodes or speaker names\n * Text+speaker+timecode\n * TODO: have a separate one or some logic to get text without timecodes?\n *\n * Export looks like\n ```\n00:00:13\t\tF_S12\nThere is a day. About ten years ago when I asked a friend to hold a baby dinosaur called plea. All\n\n00:00:24\t\tF_S1\nthat\n\n00:00:24\t\tF_S12\nhe'd ordered and I was really excited about it because I've always loved about this one has really caught technical features. It had more orders and touch sensors. It had an infra red camera and one of the things that had was a tilt sensor so it. Knew what direction. It was facing. If and when you held it upside down.\n\n00:00:46\t\tU_UKN\nI thought.\n```\n */\n\nimport { shortTimecode } from '../../timecode-converter/index.js';\nimport { Node } from 'slate';\nconst slateToText = ({ value, speakers, timecodes, atlasFormat }) => {\n  return (\n    value\n      // Return the string content of each paragraph in the value's children.\n      .map((n) => {\n        if (atlasFormat) {\n          return `${timecodes ? `${speakers ? n.speaker : ''}\\t[${shortTimecode(n.start)}]\\t` : ''}\\t${Node.string(n)}`;\n        } else {\n          return `${timecodes ? `${shortTimecode(n.start)}\\t` : ''}${speakers ? n.speaker.toUpperCase() : ''}${\n            speakers || timecodes ? '\\n' : ''\n          }${Node.string(n)}`;\n        }\n      })\n      // Join them all with line breaks denoting paragraphs.\n      .join('\\n\\n')\n  );\n};\n\nexport default slateToText;\n","/**\n * converted from react-transcript-editor draftJS update timestamp helper function\n * https://github.com/pietrop/react-transcript-editor/blob/master/packages/components/timed-text-editor/UpdateTimestamps/index.js\n *\n */\nimport { alignSTT } from 'stt-align-node';\nimport slateToText from '../../txt';\n/**\n * Update timestamps usign stt-align module\n * @param {*} currentContent - slate js value\n * @param {*} words - list of stt words\n * @return slateJS value\n */\nexport const updateTimestampsHelper = (currentContent, words) => {\n  const currentText = slateToText({ value: currentContent, speakers: false, timecodes: false, atlasFormat: false });\n  const alignedWords = alignSTT(words, currentText);\n  return alignedWords;\n};\n\nexport default updateTimestampsHelper;\n","/**\n * converted from react-transcript-editor draftJS update timestamp helper function\n * https://github.com/pietrop/react-transcript-editor/blob/master/packages/components/timed-text-editor/UpdateTimestamps/index.js\n *\n */\nimport { shortTimecode } from '../../../timecode-converter';\nimport { generatePreviousTimingsUpToCurrentOne } from '../../../dpe-to-slate';\nimport countWords from '../../../count-words';\nimport updateTimestampsHelper from './update-timestamps-helper';\n/**\n * Transposes the timecodes from stt json list of words onto\n * slateJs value paragraphs\n */\nexport const createSlateContentFromSlateJsParagraphs = (currentContent, newEntities) => {\n  // Update entites to block structure.\n  const updatedBlockArray = [];\n  let totalWords = 0;\n\n  for (const blockIndex in currentContent) {\n    const block = currentContent[blockIndex];\n    const text = block.children[0].text;\n    // if copy and pasting large chunk of text\n    // currentContentBlock, would not have speaker and start/end time info\n    // so for updatedBlock, getting start time from first word in blockEntities\n    // const wordsInBlock = (text.match(/\\S+/g) || []).length;\n    const wordsInBlock = countWords(text);\n    const blockEntites = newEntities.slice(totalWords, totalWords + wordsInBlock);\n    let speaker = block.speaker;\n    const start = parseFloat(blockEntites[0].start);\n    if (!speaker) {\n      speaker = 'U_UKN';\n    }\n    const updatedBlock = {\n      type: 'timedText',\n      speaker: speaker,\n      start,\n      previousTimings: generatePreviousTimingsUpToCurrentOne(blockEntites, start),\n      startTimecode: shortTimecode(start),\n      children: [{ text }],\n    };\n\n    updatedBlockArray.push(updatedBlock);\n    totalWords += wordsInBlock;\n  }\n  return updatedBlockArray;\n};\n\n/**\n * Update timestamps usign stt-align module\n * @param {*} currentContent - slate js value\n * @param {*} words - list of stt words\n * @return slateJS value\n */\nconst updateTimestamps = (currentContent, words) => {\n  const alignedWords = updateTimestampsHelper(currentContent, words);\n  const updatedContent = createSlateContentFromSlateJsParagraphs(currentContent, alignedWords);\n  return updatedContent;\n};\n\nexport default updateTimestamps;\n","/**\n * converted from react-transcript-editor draftJS update timestamp helper function\n * https://github.com/pietrop/react-transcript-editor/blob/master/packages/components/timed-text-editor/UpdateTimestamps/index.js\n * similar to updateTimestamps\n */\n// import { alignSTT } from 'stt-align-node';\n// import slateToText from '../txt';\nimport countWords from '../../count-words';\nimport updateTimestampsHelper from './update-timestamps/update-timestamps-helper';\n/**\n * Transposes the timecodes from stt json list of words onto\n * dpe transcript with paragraphs and words\n */\nexport const createDpeParagraphsFromSlateJs = (currentContent, newEntities) => {\n  // Update entites to block structure.\n  const updatedBlockArray = [];\n  let totalWords = 0;\n\n  for (const blockIndex in currentContent) {\n    const block = currentContent[blockIndex];\n    const text = block.children[0].text;\n    const wordsInBlock = countWords(text);\n    const blockEntites = newEntities.slice(totalWords, totalWords + wordsInBlock);\n    let speaker = block.speaker;\n    const start = parseFloat(blockEntites[0].start);\n    const end = parseFloat(blockEntites[blockEntites.length - 1].end);\n    if (!speaker) {\n      speaker = 'U_UKN';\n    }\n    const updatedBlock = {\n      speaker: speaker,\n      start,\n      end,\n    };\n\n    updatedBlockArray.push(updatedBlock);\n    totalWords += wordsInBlock;\n  }\n  return updatedBlockArray;\n};\n\n/**\n * Update timestamps usign stt-align module\n * @param {*} currentContent - slate js value\n * @param {*} words - list of stt words\n * @return dpe transcript with paragraphs and words\n */\nconst converSlateToDpe = (currentContent, words) => {\n  const alignedWords = updateTimestampsHelper(currentContent, words);\n  const updatedContent = createDpeParagraphsFromSlateJs(currentContent, alignedWords);\n  return { words: alignedWords, paragraphs: updatedContent };\n};\n\nexport default converSlateToDpe;\n","import { Document, Paragraph, TextRun, Packer } from 'docx';\nimport { shortTimecode } from '../../timecode-converter/';\nimport { Node } from 'slate';\nexport default slateToDocx;\n\nfunction slateToDocx({\n  value,\n  speakers,\n  timecodes,\n  inlineTimecodes,\n  hideTitle,\n  title = 'Transcript',\n  creator = 'Slate Transcript Editor',\n  description = 'Transcript',\n}) {\n  const doc = new Document({\n    creator: creator,\n    description: description,\n    title: title,\n  });\n\n  if (!hideTitle) {\n    // Transcript Title\n    const textTitle = new TextRun(title);\n    const paragraphTitle = new Paragraph();\n    paragraphTitle.addRun(textTitle);\n    paragraphTitle.heading1().center();\n    doc.addParagraph(paragraphTitle);\n\n    // add spacing\n    var paragraphEmpty = new Paragraph();\n    doc.addParagraph(paragraphEmpty);\n  }\n\n  value.forEach((slateParagraph) => {\n    // TODO: use timecode converter module to convert from seconds to timecode\n\n    const paragraphSpeakerTimecodes = new Paragraph();\n    if (timecodes) {\n      const timecodeStartTime = new TextRun(shortTimecode(slateParagraph.start));\n      paragraphSpeakerTimecodes.addRun(timecodeStartTime);\n    }\n    if (speakers) {\n      if (timecodes) {\n        const speaker = new TextRun(slateParagraph.speaker).bold().tab();\n        paragraphSpeakerTimecodes.addRun(speaker);\n      } else {\n        const speaker = new TextRun(slateParagraph.speaker).bold();\n        paragraphSpeakerTimecodes.addRun(speaker);\n      }\n    }\n\n    const paragraphContents = Node.string(slateParagraph);\n    const textBreak = new TextRun('').break();\n\n    if (inlineTimecodes) {\n      paragraphSpeakerTimecodes.addRun(new TextRun(`${slateParagraph.speaker.toUpperCase()}:  ${paragraphContents}`));\n    }\n\n    if (timecodes || speakers || inlineTimecodes) {\n      doc.addParagraph(paragraphSpeakerTimecodes);\n      doc.addParagraph(new Paragraph());\n    }\n\n    if (!inlineTimecodes) {\n      const paragraphText = new Paragraph(paragraphContents);\n      paragraphText.addRun(textBreak);\n      doc.addParagraph(paragraphText);\n    }\n  });\n\n  const packer = new Packer();\n\n  packer.toBlob(doc).then((blob) => {\n    const filename = `${title}.docx`;\n    // // const type =  'application/octet-stream';\n    const a = document.createElement('a');\n    a.href = window.URL.createObjectURL(blob);\n    a.download = filename;\n    a.click();\n\n    return blob;\n  });\n}\n","const formatSeconds = seconds => new Date(seconds.toFixed(3) * 1000).toISOString().substr(11, 12);\n\nexport default formatSeconds;\n","'use strict';\nimport tokenizer from 'sbd';\n\nfunction textSegmentation(text, honorifics) {\n  var optionalHonorifics = null;\n\n  if (honorifics !== undefined) {\n    optionalHonorifics = honorifics;\n  }\n\n  var options = {\n    newline_boundaries: true,\n    html_boundaries: false,\n    sanitize: false,\n    allowed_tags: false,\n    //TODO: Here could open HONORIFICS file and pass them in here I think\n    //abbreviations: list of abbreviations to override the original ones for use with other languages. Don't put dots in abbreviations.\n    abbreviations: optionalHonorifics,\n  };\n\n  var sentences = tokenizer.sentences(text, options);\n  var sentencesWithLineSpaces = sentences.join('\\n');\n\n  return sentencesWithLineSpaces;\n}\n\nexport default textSegmentation;\n","'use strict';\n\nfunction addLineBreakBetweenSentences(text) {\n  return text.replace(/\\n/g, '\\n\\n');\n}\n\nexport default addLineBreakBetweenSentences;\n","/**\n * Helper function to remove space after carriage return \\n in lines\n * @param {string} text\n */\nfunction removeSpaceAfterCarriageReturn(text) {\n  return text.replace(/\\n /g, '\\n');\n}\n\nexport default removeSpaceAfterCarriageReturn;\n","'use strict';\nimport removeSpaceAfterCarriageReturn from '../util/remove-space-after-carriage-return.js';\n\n/*\n * Helper function\n * folds array of words\n * adds `\\n`\n * foldNumber = char after which to fold. eg 35 char default\n * TODO: this could be refactored with smaller helper functions\n */\nfunction foldWordsReturnArray(textArray, foldNumber = 35) {\n  var counter = 0;\n  var result = textArray.map((word, index, list) => {\n    counter += word.length + 1;\n    //resetting counter when there is a 'paragraph' line break \\n\\n\n    if (counter <= foldNumber) {\n      // if not last word in list\n      // cover edge case last element in array does not have a next element\n      if (list[index + 1] !== undefined) {\n        var nextElementLength = list[index + 1].length;\n        //check if adding next word would make the line go over the char limit foldNumber\n        if (counter + nextElementLength < foldNumber) {\n          return word;\n        } else {\n          // if it makes it go over, reset counter, return and add line break\n          counter = 0;\n\n          return `${word}\\n`;\n        }\n        //last word in the list\n      } else {\n        return word;\n      }\n      // if not greater then char foldNumber\n    } else {\n      counter = 0;\n\n      return `${word}\\n`;\n    }\n  });\n\n  return result;\n}\n\n/*\n * text string of words\n * foldNumber = char after which to fold. eg 35 char.\n */\nfunction foldWords(text, foldNumber) {\n  // split on two line break\n  var lineArr = text.split('\\n\\n');\n  // fold each line on non fold number char count\n  var foldedWordsInArray = lineArr.map(line => {\n    return foldWordsReturnArray(line.split(' '), foldNumber);\n  });\n  // flatten result\n  var foldedWordsFlatten = foldedWordsInArray.map(line => {\n    return line.join(' ');\n  });\n\n  // remove space after carriage return \\n in lines\n  const result = foldedWordsFlatten.map(r => {\n    return removeSpaceAfterCarriageReturn(r);\n  });\n  // return text\n\n  return result.join('\\n\\n');\n}\n\nexport default foldWords;\n","// Remove preceding empty space a beginning of line\n// without removing carriage returns\n// https://stackoverflow.com/questions/24282158/javascript-how-to-remove-the-white-space-at-the-start-of-the-string\n\nfunction removeSpaceAtBeginningOfLine(text) {\n  return text.map(r => {\n    return r.replace(/^\\s+/g, '');\n  });\n}\n\nexport default removeSpaceAtBeginningOfLine;\n","'use strict';\nimport removeSpaceAtBeginningOfLine from '../util/remove-space-at-beginning-of-line.js';\n\nfunction divideIntoTwoLines(text) {\n  var lines = text.split('\\n');\n\n  var counter = 0;\n\n  var result = lines.map(l => {\n    if (l === '') {\n      return l;\n    } else {\n      if (counter === 0) {\n        counter += 1;\n        if (l[l.length - 1][0] === '.') {\n          return l + '\\n\\n';\n        }\n\n        return l + '\\n';\n      } else if (counter === 1) {\n        counter = 0;\n\n        return l + '\\n\\n';\n      }\n    }\n  });\n\n  result = removeSpaceAtBeginningOfLine(result);\n  // remove empty lines from list to avoid unwanted space a beginning of line\n  result = result.filter(line => line.length !== 0);\n\n  result = result.join('').trim();\n\n  return result;\n}\n\nexport default divideIntoTwoLines;\n","import textSegmentation from './text-segmentation/index.js';\nimport addLineBreakBetweenSentences from './line-break-between-sentences/index.js';\nimport foldWords from './fold/index.js';\nimport divideIntoTwoLines from './divide-into-two-lines/index.js';\n\n/**\n * Takes in array of word object,\n *  and returns string containing all the text\n * @param {array} words - Words\n */\nfunction getTextFromWordsList(words) {\n  return words\n    .map((word) => {\n      return word.text;\n    })\n    .join(' ');\n}\n\n/**\n *\n * @param {*} textInput - can be either plain text string or an array of word objects\n */\nfunction preSegmentText(textInput, tmpNumberOfCharPerLine = 35) {\n  let text = textInput;\n  if (typeof textInput === 'object') {\n    text = getTextFromWordsList(textInput);\n  }\n  const segmentedText = textSegmentation(text);\n  // - 2.Line brek between stentences\n  const textWithLineBreakBetweenSentences = addLineBreakBetweenSentences(segmentedText);\n  // - 3.Fold char limit per line\n  const foldedText = foldWords(textWithLineBreakBetweenSentences, tmpNumberOfCharPerLine);\n  // - 4.Divide into two lines\n  const textDividedIntoTwoLines = divideIntoTwoLines(foldedText);\n\n  return textDividedIntoTwoLines;\n}\n\nexport { preSegmentText, getTextFromWordsList };\n\nexport default preSegmentText;\n","const AMP_REGEX = /&/g;\nconst LT_REGEX = /</g;\nconst GT_REGEX = />/g;\nconst escapeText = str =>\n  str\n    .replace(AMP_REGEX, '&amp;')\n    .replace(LT_REGEX, '&lt;')\n    .replace(GT_REGEX, '&gt;');\n\nexport default escapeText;\n","import escapeText from './util/escape-text.js';\nimport formatSeconds from './util/format-seconds.js';\n\nconst ttmlGeneratorPremiere = (vttJSON) => {\n  let ttmlOut = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n    <tt xmlns=\"http://www.w3.org/ns/ttml\"\n    xmlns:ttp=\"http://www.w3.org/ns/ttml#parameter\"\n    ttp:timeBase=\"media\"\n    xmlns:m608=\"http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt#cea608\"\n    xmlns:smpte=\"http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt\"\n    xmlns:ttm=\"http://www.w3.org/ns/ttml#metadata\">\n    <head>\n    <metadata>\n    <smpte:information m608:captionService=\"F1C1CC\" m608:channel=\"cc1\"/>\n    </metadata>\n    <styling></styling>\n    <layout></layout>\n    </head>\n    <body><div>`;\n\n  vttJSON.forEach((v) => {\n    ttmlOut += `<p begin=\"${formatSeconds(parseFloat(v.start))}\" end=\"${formatSeconds(parseFloat(v.end))}\">${escapeText(v.text).replace(\n      /\\n/g,\n      '<br />'\n    )}</p>\\n`;\n  });\n  ttmlOut += '</div>\\n</body>\\n</tt>';\n\n  return `${ttmlOut}`;\n};\n\nexport default ttmlGeneratorPremiere;\n","// for itt\nimport TC from 'smpte-timecode';\n\nconst tcFormat = (frames, FPS) => {\n  const tc = TC(Math.round(frames), FPS, false);\n\n  return tc.toString().replace(/^00/, '01'); // FIXME this breaks on videos longer than 1h!\n};\n\nexport default tcFormat;\n","import tcFormat from './util/tc-format.js';\nimport escapeText from './util/escape-text.js';\n\nconst ittGenerator = (vttJSON, lang = 'en-GB', FPS = 25) => {\n  let ittOut = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <tt\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xmlns=\"http://www.w3.org/ns/ttml\"\n          xmlns:tt=\"http://www.w3.org/ns/ttml\"\n          xmlns:tts=\"http://www.w3.org/ns/ttml#styling\"\n          xmlns:ttp=\"http://www.w3.org/ns/ttml#parameter\"\n          xml:lang=\"${lang}\"\n          ttp:timeBase=\"smpte\"\n          ttp:frameRate=\"${FPS}\"\n          ttp:frameRateMultiplier=\"${FPS === 25 ? '1 1' : '999 1000'}\"\n          ttp:dropMode=\"nonDrop\"\n        >\n        <head>\n          <styling>\n            <style\n              xml:id=\"normal\"\n              tts:fontFamily=\"sansSerif\"\n              tts:fontWeight=\"normal\"\n              tts:fontStyle=\"normal\"\n              tts:color=\"white\"\n              tts:fontSize=\"100%\"\n            />\n          </styling>\n          <layout>\n            <region\n              xml:id=\"bottom\"\n              tts:origin=\"0% 85%\"\n              tts:extent=\"100% 15%\"\n              tts:textAlign=\"center\"\n              tts:displayAlign=\"after\"\n            />\n          </layout>\n        </head>\n        <body style=\"normal\" region=\"bottom\">\n          <div begin=\"-01:00:00:00\">`;\n  vttJSON.forEach(v => {\n    ittOut += `<p begin=\"${tcFormat(parseFloat(v.start) * FPS, FPS)}\" end=\"${tcFormat(parseFloat(v.end) * FPS, FPS)}\">${escapeText(v.text).replace(\n      /\\n/g,\n      '<br />'\n    )}</p>\\n`;\n  });\n  ittOut += '</div>\\n</body>\\n</tt>';\n\n  return ittOut;\n};\n\nexport default ittGenerator;\n","import escapeText from './util/escape-text.js';\nimport formatSeconds from './util/format-seconds.js';\n\nconst ttmlGenerator = vttJSON => {\n  let ttmlOut = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <tt xmlns=\"http://www.w3.org/ns/ttml\">\n    <head></head>\n    <body>\n    <div>`;\n  vttJSON.forEach(v => {\n    ttmlOut += `<p begin=\"${formatSeconds(parseFloat(v.start))}\" end=\"${formatSeconds(parseFloat(v.end))}\">${escapeText(v.text).replace(\n      /\\n/g,\n      '<br />'\n    )}</p>\\n`;\n  });\n  ttmlOut += '</div>\\n</body>\\n</tt>';\n\n  return ttmlOut;\n};\n\nexport default ttmlGenerator;\n","import formatSeconds from './util/format-seconds.js';\nconst srtGenerator = vttJSON => {\n  let srtOut = '';\n  vttJSON.forEach((v, i) => {\n    srtOut += `${i + 1}\\n${formatSeconds(parseFloat(v.start)).replace('.', ',')} --> ${formatSeconds(parseFloat(v.end)).replace(\n      '.',\n      ','\n    )}\\n${v.text.trim()}\\n\\n`;\n  });\n\n  return srtOut;\n};\n\nexport default srtGenerator;\n","import formatSeconds from './util/format-seconds.js';\n\nconst vttGenerator = (vttJSON, speakers = false) => {\n  let vttOut = 'WEBVTT\\n\\n';\n  vttJSON.forEach((v, i) => {\n    vttOut += `${i + 1}\\n${formatSeconds(parseFloat(v.start))} --> ${formatSeconds(parseFloat(v.end))}\\n${speakers ? `<v ${v.speaker}>` : ``}${\n      v.text\n    }\\n\\n`;\n  });\n\n  return vttOut;\n};\n\nexport default vttGenerator;\n","import formatSeconds from './util/format-seconds.js';\nfunction csvGenerator(srtJsonContent) {\n  let lines = 'N, In, Out, Text\\n';\n  srtJsonContent.forEach((srtLineO, index) => {\n    lines += `${index + 1},`;\n    //need to surround timecodes with \"\\\"\" escaped \" to escape the , for the milliseconds\n    // lines += `\\\"${ srtLineO.start }\\\",\\\"${ srtLineO.end }\\\",`;\n    lines += `\\\"${formatSeconds(parseFloat(srtLineO.start)).replace('.', ',')}\\\",\\\"${formatSeconds(parseFloat(srtLineO.end)).replace('.', ',')}\\\",`;\n    // removing line breaks and and removing \" as they break the csv.\n    // wrapping text in escaped \" to  escape any , for the csv.\n    // adding carriage return \\n to signal end of line in csv\n    // Preserving line break within srt lines to allow round trip from csv back to srt file in same format.\n    // by replacing \\n with \\r\\n.\n    lines += `\\\"${srtLineO.text.replace(/\\n/g, '\\r\\n')}\\\"\\n`;\n  });\n\n  return lines;\n}\n\nexport default csvGenerator;\n","import formatSeconds from './compose-subtitles/util/format-seconds.js';\nimport textSegmentation from './presegment-text/text-segmentation/index.js';\nimport addLineBreakBetweenSentences from './presegment-text/line-break-between-sentences/index.js';\nimport foldWords from './presegment-text/fold/index.js';\nimport divideIntoTwoLines from './presegment-text/divide-into-two-lines/index.js';\nimport preSegmentText from './presegment-text/index.js';\nimport { getTextFromWordsList } from './presegment-text/index.js';\n\nimport ttmlGeneratorPremiere from './compose-subtitles/premiere.js';\nimport ittGenerator from './compose-subtitles/itt.js';\nimport ttmlGenerator from './compose-subtitles/ttml.js';\nimport srtGenerator from './compose-subtitles/srt.js';\nimport vttGenerator from './compose-subtitles/vtt.js';\nimport csvGenerator from './compose-subtitles/csv.js';\nimport countWords from '../../count-words';\n\nfunction segmentedTextToList(text) {\n  let result = text.split('\\n\\n');\n  result = result.map((line) => {\n    return line.trim();\n  });\n\n  return result;\n}\n\nfunction addTimecodesToLines(wordsList, paragraphs, lines) {\n  wordsList = wordsList.filter((w) => w.text.length > 0);\n  let startWordCounter = 0;\n  let endWordCounter = 0;\n  const results = lines.map((line) => {\n    endWordCounter += countWords(line);\n\n    const jsonLine = { text: line.trim() };\n    jsonLine.start = wordsList[startWordCounter].start;\n    // TODO: there's an issue here and `vtt_speakers_paragraphs` export is broken\n    jsonLine.end = wordsList[endWordCounter - 1].end;\n\n    // #-----------------|------|-----------------#\n    const possibleParagraphs = paragraphs\n      .filter((p) => jsonLine.start >= p.start && jsonLine.start < p.end)\n      .map((p) => {\n        const inParagraphEndTime = Math.min(jsonLine.end, p.end);\n        const inParagraphDuration = inParagraphEndTime - jsonLine.start;\n\n        const totalDuration = jsonLine.end - jsonLine.start;\n        const pctInParagraph = inParagraphDuration / totalDuration;\n\n        return {\n          ...p,\n          pctInParagraph,\n        };\n      })\n      .sort((a, b) => b.pctInParagraph - a.pctInParagraph || a.start - b.start); // sort by % in paragraph descending, then start time ascending\n    jsonLine.speaker = possibleParagraphs.length > 0 ? possibleParagraphs[0].speaker : 'UNKNOWN';\n    startWordCounter = endWordCounter;\n\n    return jsonLine;\n  });\n\n  return results;\n}\n\nfunction segmentTextByParagraph(wordList, paragraphs) {\n  let str = [];\n  let p_id = '0';\n\n  const sorted_paragraphs = paragraphs.sort((a, b) => a.start - b.start);\n  for (const { text, start } of wordList) {\n    const foundParagraph = sorted_paragraphs.filter((p) => p.start <= start && p.end >= start)[0];\n    if (foundParagraph.id !== p_id) {\n      p_id = foundParagraph.id;\n      str.push('\\n\\n');\n    }\n    str.push(text);\n  }\n  return str.join(' ');\n}\n\nfunction preSegmentTextJson(wordsList, paragraphs, numberOfCharPerLine, paragraphMode = false) {\n  let result;\n  if (paragraphMode) {\n    result = segmentTextByParagraph(wordsList, paragraphs);\n  } else {\n    result = preSegmentText(wordsList, numberOfCharPerLine);\n  }\n\n  const segmentedTextArray = segmentedTextToList(result);\n\n  return addTimecodesToLines(wordsList, paragraphs, segmentedTextArray);\n}\n\nfunction subtitlesComposer({ words, paragraphs, type, numberOfCharPerLine }) {\n  const subtitlesJson = preSegmentTextJson(words, paragraphs, numberOfCharPerLine, type === 'vtt_speakers_paragraphs');\n  if (typeof words === 'string') {\n    return preSegmentText(words, numberOfCharPerLine);\n  }\n  switch (type) {\n    case 'premiereTTML':\n      return ttmlGeneratorPremiere(subtitlesJson);\n    case 'ttml':\n      return ttmlGenerator(subtitlesJson);\n    case 'itt':\n      return ittGenerator(subtitlesJson);\n    case 'srt':\n      return srtGenerator(subtitlesJson);\n    case 'vtt':\n      return vttGenerator(subtitlesJson);\n    case 'vtt_speakers':\n    case 'vtt_speakers_paragraphs':\n      return vttGenerator(subtitlesJson, true);\n    case 'json':\n      // converting timecodes to captions time stamps\n      return subtitlesJson.map((line) => {\n        line.start = formatSeconds(parseFloat(line.start)).replace('.', ',');\n        line.end = formatSeconds(parseFloat(line.end)).replace('.', ',');\n        return line;\n      });\n    case 'csv':\n      return csvGenerator(subtitlesJson);\n    case 'pre-segment-txt':\n      return preSegmentText(words, numberOfCharPerLine);\n    case 'txt':\n      return preSegmentText(words, numberOfCharPerLine);\n    default:\n      return 'Could not find the subtitle format';\n  }\n}\n\nexport {\n  textSegmentation,\n  addLineBreakBetweenSentences,\n  foldWords,\n  divideIntoTwoLines,\n  getTextFromWordsList,\n  preSegmentText,\n  ttmlGeneratorPremiere,\n  ttmlGenerator,\n  ittGenerator,\n  srtGenerator,\n  vttGenerator,\n};\n\nexport default subtitlesComposer;\n","/**\n * Adapters for Draft.js conversion\n * @param {json} slateValue - Draft.js blocks\n * @param {string} type - the type of file supported by the available adapters\n */\n\nimport slateToText from './txt';\nimport converSlateToDpe from './slate-to-dpe';\nimport slateToDocx from '../export-adapters/docx';\nimport subtitlesExportOptionsList from './subtitles-generator/list';\nimport subtitlesGenerator from './subtitles-generator/index';\n\nconst captionTypeList = subtitlesExportOptionsList.map((list) => {\n  return list.type;\n});\n\nconst isCaptionType = (type) => {\n  const res = captionTypeList.includes(type);\n  return res;\n};\nconst exportAdapter = ({\n  slateValue,\n  type,\n  ext,\n  transcriptTitle,\n  speakers,\n  timecodes,\n  inlineTimecodes,\n  hideTitle,\n  atlasFormat,\n  dpeTranscriptData,\n}) => {\n  switch (type) {\n    case 'text':\n      return slateToText({ value: slateValue, speakers, timecodes, atlasFormat });\n    case 'json-slate':\n      return slateValue;\n    case 'json-digitalpaperedit':\n      return converSlateToDpe(slateValue, dpeTranscriptData);\n    case 'word':\n      //   return { data: draftToDocx(slateValue, transcriptTitle), ext: 'docx' };\n      return slateToDocx({\n        title: transcriptTitle,\n        value: slateValue,\n        speakers,\n        timecodes,\n        inlineTimecodes,\n        hideTitle,\n      });\n    default:\n      if (isCaptionType(type)) {\n        let editorContent = converSlateToDpe(slateValue, slateValue[0].children[0]);\n        editorContent.paragraphs.forEach(obj => {\n          if (obj['speaker'] === 'Add speaker') {\n            obj['speaker'] = '';\n          }\n        });\n        let subtitlesJson = subtitlesGenerator({\n          words: editorContent.words,\n          paragraphs: editorContent.paragraphs,\n          type,\n        });\n        return subtitlesJson;\n      }\n      // some default, unlikely to be called\n      console.error('Did not recognise the export format ', type);\n      return 'Did not recognise the export format';\n  }\n};\n\nexport default exportAdapter;\n","// https://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\nexport default isEmpty;\n","// import { generatePreviousTimingsUpToCurrentOne } from '../dpe-to-slate';\n\n/**\n * See explanation in `src/utils/dpe-to-slate/index.js` for how this function works with css injection\n * to provide current paragaph's highlight.\n * @param {Number} currentTime - float in seconds\n */\nimport isEmpty from '../../is-empty';\n/**\n *\n * @param {*} currentTime\n * @param {*} transcriptData - dpe transcript data with timecodes at word level\n */\n// const generatePreviousTimingsUpToCurrent = (currentTime, transcriptData) => {\n//   // edge case - empty transcription\n//   if (isEmpty(transcriptData)) {\n//     return '';\n//   }\n//   const lastWordStartTime = transcriptData.words[transcriptData.words.length - 1].start;\n//   const lastWordStartTimeInt = parseInt(lastWordStartTime);\n//   const emptyListOfTimes = Array(lastWordStartTimeInt);\n//   const listOfTimesInt = [...emptyListOfTimes.keys()];\n//   const listOfTimesUpToCurrentTimeInt = listOfTimesInt.splice(0, currentTime, 0);\n//   const stringlistOfTimesUpToCurrentTimeInt = listOfTimesUpToCurrentTimeInt.join(' ');\n//   return stringlistOfTimesUpToCurrentTimeInt;\n// };\n\n// export default generatePreviousTimingsUpToCurrent;\n\n/**\n *\n * @param {*} currentTime\n * @param {*} transcriptDataSlateValue - slateJS value data with timecodes at paragraph level\n */\nconst generatePreviousTimingsUpToCurrent = (currentTime, transcriptDataSlateValue) => {\n  // edge case - empty transcription\n  if (isEmpty(transcriptDataSlateValue)) {\n    return '';\n  }\n  const lastWordStartTime = transcriptDataSlateValue[transcriptDataSlateValue.length - 1].start;\n  const lastWordStartTimeInt = parseInt(lastWordStartTime);\n  const emptyListOfTimes = Array(lastWordStartTimeInt);\n  const listOfTimesInt = [...emptyListOfTimes.keys()];\n  const listOfTimesUpToCurrentTimeInt = listOfTimesInt.splice(0, currentTime, 0);\n  const stringlistOfTimesUpToCurrentTimeInt = listOfTimesUpToCurrentTimeInt.join(' ');\n  return stringlistOfTimesUpToCurrentTimeInt;\n};\n\nexport default generatePreviousTimingsUpToCurrent;\n","const languagesArray = {\n     'ab' : 'Abkhazian', 'aa' : 'Afar', 'af' : 'Afrikaans', 'ak' : 'Akan', 'sq' : 'Albanian', 'am' : 'Amharic', 'ar' : 'Arabic', 'an' : 'Aragonese',\n                       'hy' : 'Armenian', 'as' : 'Assamese', 'av' : 'Avaric', 'ae' : 'Avestan', 'ay' : 'Aymara', 'az' : 'Azerbaijani', 'bm' : 'Bambara', 'ba' : 'Bashkir',\n                       'eu' : 'Basque', 'be' : 'Belarusian', 'bn' : 'Bengali', 'bh' : 'Bihari languages',\n                       'bi' : 'Bislama', 'bs' : 'Bosnian', 'br' : 'Breton', 'bg' : 'Bulgarian', 'my' : 'Burmese',\n                       'ca' : 'Catalan, Valencian', 'km' : 'Central Khmer', 'ch' : 'Chamorro', 'ce' : 'Chechen', 'ny' : 'Chichewa, Chewa, Nyanja', 'zh' : 'Chinese', 'zh-TW' : 'Chinese (Traditional)',\n                       'cu' : 'Church Slavonic, Old Bulgarian, Old Church Slavonic', 'cv' : 'Chuvash', 'kw' : 'Cornish', 'co' : 'Corsican', 'cr' : 'Cree', 'zh-Hans' : 'Chinese (Simplified)', 'zh-Hant' : 'Chinese (Traditional)',\n                       'hr' : 'Croatian', 'cs' : 'Czech', 'da' : 'Danish', 'dv' : 'Divehi, Dhivehi, Maldivian', 'nl' : 'Dutch, Flemish', 'dz' : 'Dzongkha',\n                       'en' : 'English', 'eo' : 'Esperanto', 'et' : 'Estonian', 'ee' : 'Ewe',\n                       'fo' : 'Faroese', 'fj' : 'Fijian', 'fi' : 'Finnish', 'fil' : 'Filipino', 'fr-FR' : 'French', 'fr' : 'French', 'ff' : 'Fulah', 'gd' : 'Gaelic, Scottish Gaelic', 'gl' : 'Galician',\n                       'lg' : 'Ganda', 'ka' : 'Georgian', 'de' : 'German', 'ki' : 'Gikuyu, Kikuyu', 'el' : 'Greek (Modern)', 'kl' : 'Greenlandic, Kalaallisut', 'gn' : 'Guarani',\n                       'gu' : 'Gujarati', 'ht' : 'Haitian, Haitian Creole', 'ha' : 'Hausa', 'haw' : 'Hawaiian', 'he' : 'Hebrew', 'hz' : 'Herero', 'hi' : 'Hindi', 'ho' : 'Hiri Motu', 'hu' : 'Hungarian',\n                       'is' : 'Icelandic', 'io' : 'Ido', 'ig' : 'Igbo', 'id' : 'Indonesian', 'ia' : 'Interlingua (International Auxiliary Language Association)', 'ie' : 'Interlingue',\n                       'iu' : 'Inuktitut', 'ik' : 'Inupiaq', 'iw' : 'Hebrew', 'ga' : 'Irish', 'it' : 'Italian', 'ja' : 'Japanese',\n                       'jv' : 'Javanese', 'kn' : 'Kannada', 'kr' : 'Kanuri', 'ks' : 'Kashmiri', 'kk' : 'Kazakh', 'kri' : 'Krio',\n                       'rw' : 'Kinyarwanda', 'kv' : 'Komi', 'kg' : 'Kongo', 'ko' : 'Korean', 'kj' : 'Kwanyama, Kuanyama', 'ku' : 'Kurdish', 'ky' : 'Kyrgyz', 'lo' : 'Lao',\n                       'la' : 'Latin', 'lv' : 'Latvian', 'lb' : 'Letzeburgesch, Luxembourgish', 'li' : 'Limburgish, Limburgan, Limburger', 'ln' : 'Lingala', 'lt' : 'Lithuanian',\n                       'lu' : 'Luba-Katanga', 'mk' : 'Macedonian', 'mg' : 'Malagasy', 'ms' : 'Malay', 'ml' : 'Malayalam',\n                       'mt' : 'Maltese', 'gv' : 'Manx', 'mi' : 'Maori', 'mr' : 'Marathi', 'mh' : 'Marshallese',\n                       'ro' : 'Moldovan, Moldavian, Romanian', 'mn' : 'Mongolian', 'nso' : 'Northern Sotho', 'na' : 'Nauru', 'nv' : 'Navajo, Navaho', 'nd' : 'Northern Ndebele', 'ng' : 'Ndonga',\n                       'ne' : 'Nepali', 'se' : 'Northern Sami', 'no' : 'Norwegian', 'nb' : 'Norwegian Bokmål',\n                       'nn' : 'Norwegian Nynorsk', 'ii' : 'Nuosu, Sichuan Yi', 'oc' : 'Occitan (post 1500)',\n                       'oj' : 'Ojibwa', 'or' : 'Oriya', 'om' : 'Oromo', 'os' : 'Ossetian, Ossetic',\n                       'pi' : 'Pali', 'pa' : 'Panjabi, Punjabi', 'ps' : 'Pashto, Pushto', 'fa' : 'Persian',\n                       'pl' : 'Polish', 'pt' : 'Portuguese', 'qu' : 'Quechua', 'rm' : 'Romansh', 'rn' : 'Rundi',\n                       'ru' : 'Russian', 'sm' : 'Samoan', 'sg' : 'Sango', 'sa' : 'Sanskrit',\n                       'sc' : 'Sardinian', 'sr' : 'Serbian', 'sn' : 'Shona', 'sd' : 'Sindhi',\n                       'si' : 'Sinhala, Sinhalese',\n                       'sk' : 'Slovak', 'sl' : 'Slovenian', 'so' : 'Somali', 'st' : 'Sotho, Southern',\n                       'nr' : 'South Ndebele',\n                       'es' : 'Spanish', 'es-419' : 'Spanish (Latin America)', 'su' : 'Sundanese', 'sw' : 'Swahili', 'ss' : 'Swati',\n                       'sv' : 'Swedish', 'tl' : 'Tagalog', 'ty' : 'Tahitian', 'tg' : 'Tajik', 'ta' : 'Tamil',\n                       'tt' : 'Tatar', 'te' : 'Telugu', 'th' : 'Thai', 'bo' : 'Tibetan', 'ti' : 'Tigrinya',\n                       'to' : 'Tonga (Tonga Islands)', 'ts' : 'Tsonga', 'tn' : 'Tswana', 'tr' : 'Turkish',\n                       'tk' : 'Turkmen', 'tw' : 'Twi', 'ug' : 'Uighur, Uyghur', 'uk' : 'Ukrainian', 'ur' : 'Urdu', 'uz' : 'Uzbek', 've' : 'Venda', 'vi' : 'Vietnamese', 'vo' : 'Volap_k',\n                       'wa' : 'Walloon', 'cy' : 'Welsh', 'fy' : 'Western Frisian', 'wo' : 'Wolof', 'xh' : 'Xhosa', 'yi' : 'Yiddish', 'yo' : 'Yoruba', 'za' : 'Zhuang, Chuang', 'zu' : 'Zulu'\n                    }\n\nexport default languagesArray;\n","import React from 'react';\n\nconst YouTubePlayer = ({ videoId }) => {\n  return (\n    <iframe\n      width=\"560\"\n      height=\"315\"\n      src={`https://www.youtube.com/embed/${videoId}`}\n      frameBorder=\"0\"\n      allowFullScreen\n    ></iframe>\n  );\n};\n\nconst MediaComponent = (props) => {\n  const isYouTube = props.mediaUrl.includes('youtube.com');\n\n  return (\n    <>\n      {isYouTube ? (\n        <YouTubePlayer videoId={extractVideoId(props.mediaUrl)} />\n      ) : (\n        <video\n          ref={props.mediaRef}\n          src={props.mediaUrl}\n          width={'100%'}\n          height={'auto'}\n          controls\n          playsInline\n        ></video>\n      )}\n    </>\n  );\n};\n\n// Function to extract video ID from YouTube URL\nconst extractVideoId = (url) => {\n  const videoIdMatch = url.match(/[?&]v=([^&#]+)/);\n  return videoIdMatch ? videoIdMatch[1] : '';\n};\n\nexport default MediaComponent;\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport path from 'path';\nimport { css } from '@emotion/css'\nimport Button from 'react-bootstrap/Button';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Badge from 'react-bootstrap/Badge';\nimport { Tabs, Tab } from 'react-bootstrap'\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport { createEditor, Editor, Transforms, Text } from 'slate';\nimport { Slate, Editable, withReact, ReactEditor } from 'slate-react';\nimport { withHistory } from 'slate-history';\nimport {\n  faSave,\n  faFileDownload,\n  faUndo,\n  faSync,\n  faInfoCircle,\n  // faMehBlank,\n  faPause,\n  faEdit,\n  // faMusic,\n  // faClosedCaptioning,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { shortTimecode, timecodeToSeconds } from '../util/timecode-converter';\nimport download from '../util/downlaod/index.js';\nimport convertDpeToSlate from '../util/dpe-to-slate';\n// TODO: This should be moved in export utils\nimport insertTimecodesInline from '../util/inline-interval-timecodes';\nimport pluck from '../util/pluk';\nimport subtitlesExportOptionsList from '../util/export-adapters/subtitles-generator/list.js';\n// import updateTimestamps from '../util/update-timestamps';\nimport updateTimestamps from '../util/export-adapters/slate-to-dpe/update-timestamps';\nimport exportAdapter from '../util/export-adapters';\nimport isEmpty from '../util/is-empty';\nimport generatePreviousTimingsUpToCurrent from '../util/dpe-to-slate/generate-previous-timings-up-to-current';\nimport languagesArray from '../util/languages';\nimport MediaComponent from './media-component.js';\n\nconst PLAYBACK_RATE_VALUES = [0.2, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 3, 3.5];\nconst SEEK_BACK_SEC = 15;\nconst PAUSE_WHILTE_TYPING_TIMEOUT_MILLISECONDS = 1500;\nconst MAX_DURATION_FOR_PERFORMANCE_OPTIMIZATION_IN_SECONDS = 3600;\nconst TOOTLIP_DELAY = 1000;\nconst TOOTLIP_LONGER_DELAY = 2000;\n\nexport default function SlateTranscriptEditor(props) {\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const editor = useMemo(() => withReact(withHistory(createEditor())), []);\n  const [value, setValue] = useState([]);\n  const defaultShowSpeakersPreference = typeof props.showSpeakers === 'boolean' ? props.showSpeakers : true;\n  const defaultShowTimecodesPreference = typeof props.showTimecodes === 'boolean' ? props.showTimecodes : true;\n  const [showSpeakers, setShowSpeakers] = useState(defaultShowSpeakersPreference);\n  const [showTimecodes, setShowTimecodes] = useState(defaultShowTimecodesPreference);\n  const [speakerOptions, setSpeakerOptions] = useState([]);\n  const [showSpeakersCheatShet, setShowSpeakersCheatShet] = useState(false);\n  const [saveTimer, setSaveTimer] = useState(null);\n  const [isPauseWhiletyping, setIsPauseWhiletyping] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  // used isContentModified to avoid unecessarily run alignment if the slate value contnet has not been modified by the user since\n  // last save or alignment\n  const [isContentModified, setIsContentIsModified] = useState(false);\n  const [findContent, setFindContent] = useState('');\n  const [replaceContent, setReplaceContent] = useState('');\n  // Fields for the metadata editor\n  const [description, setDescription] = useState(props.metadata.description);\n  const [language, setLanguage] = useState(props.metadata.language);\n  const [isPublic, setIsPublic] = useState(!!props.metadata.is_public);\n  const [isCaption, setIsCaption] = useState(!!props.metadata.is_caption);\n  const [isDownloadable, setIsDownloadable] = useState(!!props.metadata.is_downloadable);\n\n  useEffect(() => {\n    if (isProcessing) {\n      document.body.style.cursor = 'wait';\n    } else {\n      document.body.style.cursor = 'default';\n    }\n  }, [isProcessing]);\n\n  useEffect(() => {\n    if (props.transcriptData) {\n      const res = convertDpeToSlate(props.transcriptData, props.sttType);\n      setValue(res);\n    }\n  }, []);\n\n  // handles interim results for working with a Live STT\n  useEffect(() => {\n    if (props.transcriptDataLive) {\n      const nodes = convertDpeToSlate(props.transcriptDataLive, props.sttType);\n      // if the user is selecting the / typing the text\n      // Transforms.insertNodes would insert the node at seleciton point\n      // instead we check if they are in the editor\n      if (editor.selection) {\n        // get the position of the last node\n        const positionLastNode = [editor.children.length];\n        // insert the new nodes at the end of the document\n        Transforms.insertNodes(editor, nodes, {\n          at: positionLastNode,\n        });\n      }\n      // use not having selection in the editor allows us to also handle the initial use case\n      // where the might be no initial results\n      else {\n        // if there is no selection the default for insertNodes is to add the nodes at the end\n        Transforms.insertNodes(editor, nodes);\n      }\n    }\n  }, [props.transcriptDataLive]);\n\n  useEffect(() => {\n    const getUniqueSpeakers = pluck('speaker');\n    const uniqueSpeakers = getUniqueSpeakers(value);\n    setSpeakerOptions(uniqueSpeakers);\n  }, [showSpeakersCheatShet]);\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    if (props.mediaRef && props.mediaRef.current) {\n      // setDuration(props.mediaRef.current.duration);\n      props.mediaRef.current.addEventListener('timeupdate', handleTimeUpdated);\n    }\n    return function cleanup() {\n      // removeEventListener\n      if (!props.mediaUrl.includes('youtube.com')){\n        props.mediaRef.current.removeEventListener('timeupdate', handleTimeUpdated);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    if (props.mediaRef && props.mediaRef.current) {\n      // Not working\n      setDuration(props.mediaRef.current.duration);\n      if (props.mediaRef.current.duration >= MAX_DURATION_FOR_PERFORMANCE_OPTIMIZATION_IN_SECONDS) {\n        setShowSpeakers(false);\n        showTimecodes(false);\n      }\n    }\n  }, [props.mediaRef]);\n\n  const getSlateContent = () => {\n    return value;\n  };\n\n  const getFileTitle = () => {\n    if (props.title) {\n      return props.title;\n    }\n    return path.basename(props.mediaUrl).trim();\n  };\n\n  const getMediaType = () => {\n    const clipExt = path.extname(props.mediaUrl);\n    let tmpMediaType = props.mediaType ? props.mediaType : 'video';\n    if (clipExt === '.wav' || clipExt === '.mp3' || clipExt === '.m4a' || clipExt === '.flac' || clipExt === '.aiff') {\n      tmpMediaType = 'audio';\n    }\n    return tmpMediaType;\n  };\n\n  const breakParagraph = () => {\n    Editor.insertBreak(editor);\n  };\n  const insertTextInaudible = () => {\n    Transforms.insertText(editor, '[INAUDIBLE]');\n  };\n\n  const handleInsertMusicNote = () => {\n    Transforms.insertText(editor, '♫'); // or ♪\n  };\n\n  const handleSetShowSpeakersCheatShet = () => {\n    setShowSpeakersCheatShet(!showSpeakersCheatShet);\n  };\n\n  const handleTimeUpdated = (e) => {\n    setCurrentTime(e.target.currentTime);\n    // TODO: setting duration here as a workaround\n    setDuration(props.mediaRef.current.duration);\n  };\n\n  const handleSetPlaybackRate = (e) => {\n    const tmpNewPlaybackRateValue = parseFloat(e.target.value);\n    if (props.mediaRef && props.mediaRef.current) {\n      props.mediaRef.current.playbackRate = tmpNewPlaybackRateValue;\n      setPlaybackRate(tmpNewPlaybackRateValue);\n    }\n  };\n\n  const handleSeekBack = () => {\n    if (props.mediaRef && props.mediaRef.current) {\n      props.mediaRef.current.currentTime = props.mediaRef.current.currentTime - SEEK_BACK_SEC;\n    }\n  };\n\n  const renderElement = useCallback((props) => {\n    switch (props.element.type) {\n      case 'timedText':\n        return <TimedTextElement {...props} />;\n      default:\n        return <DefaultElement {...props} />;\n    }\n  }, []);\n  \n  const decorate = useCallback(\n    ([node, path]) => {\n      const ranges = []\n\n      if (findContent && Text.isText(node)) {\n        const { text } = node\n        const parts = text.split(findContent)\n        let offset = 0\n\n        parts.forEach((part, i) => {\n          if (i !== 0) {\n            ranges.push({\n              anchor: { path, offset: offset - findContent.length },\n              focus: { path, offset },\n              highlight: true,\n            })\n          }\n\n          offset = offset + part.length + findContent.length\n        })\n      }\n      return ranges\n    },\n    [findContent]\n  )\n\n  const Leaf = ({ attributes, children, leaf }) => {\n    return (\n      <span\n        {...attributes}\n        onDoubleClick={handleTimedTextClick}\n        {...(leaf.highlight && { 'data-cy': 'search-highlighted' })}\n        className={css`\n          font-weight: ${leaf.bold && 'bold'};\n          background-color: ${leaf.highlight && '#ffeeba'};\n        `}\n        data-start={children.props.parent.start}\n        data-previous-timings={children.props.parent.previousTimings}\n        title={children.props.parent.start}\n      >\n        {children}\n      </span>\n    );\n  };\n\n  //\n\n  /**\n   * `handleSetSpeakerName` is outside of TimedTextElement\n   * to improve the overall performance of the editor,\n   * especially on long transcripts\n   * @param {*} element - props.element, from `renderElement` function\n   */\n  const handleSetSpeakerName = async (element) => {\n    const pathToCurrentNode = ReactEditor.findPath(editor, element);\n    const oldSpeakerName = element.speaker;\n    const newSpeakerName = await createAccessibleDialog('Change speaker name', oldSpeakerName, true);\n\n    if (newSpeakerName) {\n      let textWithSpeakers = `Would you like to replace all occurrences of ${oldSpeakerName} with ${newSpeakerName} ( Cancel to replace just this one )`;\n      let textWithoutSpeakers = `Would you like to add speaker ${newSpeakerName} to this line or all lines? ( Cancel to add just this one )`;\n      const isUpdateAllSpeakerInstances = await createAccessibleDialog(oldSpeakerName.toString().toLowerCase() !== 'add speaker' ? textWithSpeakers : textWithoutSpeakers, null, false);\n      if (isUpdateAllSpeakerInstances) {\n        const rangeForTheWholeEditor = Editor.range(editor, []);\n        // Apply transformation to the whole doc, where speaker matches old speaker name, and set it to new one\n        Transforms.setNodes(\n          editor,\n          { type: 'timedText', speaker: newSpeakerName },\n          {\n            at: rangeForTheWholeEditor,\n            match: (node) => node.type === 'timedText' && node.speaker.toString().toLowerCase() === oldSpeakerName.toString().toLowerCase(),\n          }\n        );\n      } else {\n        // only apply speaker name transformation to current element\n        Transforms.setNodes(editor, { type: 'timedText', speaker: newSpeakerName }, { at: pathToCurrentNode });\n      }\n      const maxSpeakerLength = findLongestSpeakerNameLength(editor.children)\n      const minWidth = maxSpeakerLength < 17 ? maxSpeakerLength + 1 : 17;\n      document.querySelectorAll('.speakers-col').forEach(element => {\n        element.style.minWidth = minWidth+'ch';\n      });\n    }\n  };\n\n  // Function to create an accessible dialog\n  const createAccessibleDialog = (message, defaultValue, displayInput) => {\n    return new Promise((resolve) => {\n      const dialogContainer = document.createElement('div');\n      dialogContainer.setAttribute('role', 'dialog');\n      dialogContainer.setAttribute('aria-modal', 'true');\n      dialogContainer.setAttribute('aria-labelledby', 'promptMessage');\n      dialogContainer.style.position = 'fixed';\n      dialogContainer.style.top = '50%';\n      dialogContainer.style.left = '50%';\n      dialogContainer.style.transform = 'translate(-50%, -50%)';\n      dialogContainer.style.backgroundColor = '#fff';\n      dialogContainer.style.padding = '20px';\n      dialogContainer.style.zIndex = '9999';\n  \n      const messageElement = document.createElement('p');\n      messageElement.setAttribute('id', 'promptMessage');\n      messageElement.textContent = message;\n      dialogContainer.appendChild(messageElement);\n\n      const inputField = document.createElement('input');\n\n      if (displayInput) {\n        inputField.setAttribute('type', 'text');\n        inputField.setAttribute('aria-label', message);\n        inputField.value = defaultValue || '';\n        dialogContainer.appendChild(inputField);\n      }\n  \n      const okButton = document.createElement('button');\n      okButton.textContent = 'OK';\n      okButton.addEventListener('click', () => {\n        if (displayInput) {\n          resolve(inputField.value);\n        } else {\n          resolve(true);\n        }\n        document.body.removeChild(dialogContainer);\n      });\n      dialogContainer.appendChild(okButton);\n  \n      const cancelButton = document.createElement('button');\n      cancelButton.textContent = 'Cancel';\n      cancelButton.addEventListener('click', () => {\n        resolve(null);\n        document.body.removeChild(dialogContainer);\n      });\n      dialogContainer.appendChild(cancelButton);\n  \n      document.body.appendChild(dialogContainer);\n      const focusableElement = displayInput ? inputField : okButton;\n      focusableElement.focus();\n    });\n  };  \n\n  const handleTimeCodeEdit = async (element) => {\n    const pathToCurrentNode = ReactEditor.findPath(editor, element);\n    const oldTimeCode = element.startTimecode\n    const newTimeCode = await createAccessibleDialog('Change timecode', oldTimeCode, true);\n    const timeCodeFormatRegex = /^(?:[01]\\d|2[0-3]):(?:[0-5]\\d):(?:[0-5]\\d)$/;\n\n    if (newTimeCode && timeCodeFormatRegex.test(newTimeCode)) {\n      Transforms.setNodes(editor, { type: 'timedText', startTimecode: newTimeCode, start: timecodeToSeconds(newTimeCode) }, { at: pathToCurrentNode });\n    } else {\n      alert('Please enter the timecode in the correct format HH:MM:SS');\n    }\n  }\n\n  const TimedTextElement = (props) => {\n    let textLg = 12;\n    let textXl = 12;\n    if (!showSpeakers && !showTimecodes) {\n      textLg = 12;\n      textXl = 12;\n    } else if (showSpeakers && !showTimecodes) {\n      textLg = 9;\n      textXl = 9;\n    } else if (!showSpeakers && showTimecodes) {\n      textLg = 9;\n      textXl = 10;\n    } else if (showSpeakers && showTimecodes) {\n      textLg = 6;\n      textXl = 7;\n    }\n\n    return (\n      <Row {...props.attributes} className='mb-3 border-bottom pb-3' style={{textAlign: props.attributes.dir === 'rtl' ? 'right' : 'left'}}>\n        {showTimecodes && (\n          <Col contentEditable={false} className={'text-truncate p-0 pl-3 col-auto'}>\n            <code\n              contentEditable={false}\n              style={{ cursor: 'pointer' }}\n              className={'timecode text-muted unselectable'}\n              onClick={handleTimedTextClick}\n              title={props.element.startTimecode}\n              data-start={props.element.start}\n            >\n              {props.element.startTimecode}\n               <OverlayTrigger\n                 delay={TOOTLIP_DELAY}\n                 placement={'bottom'}\n                 overlay={\n                  <Tooltip id=\"tooltip-disabled\">\n                    Edit the timecode to change to whatever you want\n                  </Tooltip>\n                 }\n               >\n               <FontAwesomeIcon\n                 icon={faEdit} \n                 onClick={handleTimeCodeEdit.bind(this, props.element)} \n                 onKeyDown={(e) => handleTimeCodeEditKeyPress(e, props.element)}\n                 pull=\"left\" \n                 className='mt-1'\n                 tabIndex={0} \n                 role='button'\n                 title={'Edit Timecode' + props.element.startTimecode}\n                 aria-label={'Edit timecode' + props.element.startTimecode}\n                />\n              </OverlayTrigger>\n            </code>\n          </Col>\n        )}\n        {showSpeakers && (\n          <Col contentEditable={false} className={'p-0 pl-3 text-left col-auto speakers-col'} style={{minWidth: findLongestSpeakerNameLength(editor.children)+'ch', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', maxWidth: '17ch'}}>\n            <span\n              contentEditable={false}\n              className={'text-muted'}\n              tabIndex={0}\n              style={{\n                cursor: 'pointer',\n                textTransform: props.element.speaker !== 'Add speaker' ? 'uppercase' : '',\n                fontStyle: props.element.speaker === 'Add speaker' ? 'italic' : 'normal',\n              }}\n              title={props.element.speaker}\n              onClick={handleSetSpeakerName.bind(this, props.element)}\n              onKeyDown={(e) => handleSetSpeakerNameKeyPress(e, props.element)}\n            >\n            {props.element.speaker}\n            </span>\n          </Col>            \n        )}\n        <Col className={'p-b-1 wd-fit'}>\n          {props.children}\n        </Col>\n      </Row>\n    );\n  };\n\n  const handleSetSpeakerNameKeyPress = (e, element) => {\n    if (e.key === ' ' || e.key === 'Spacebar') {\n      e.preventDefault();\n      handleSetSpeakerName(element);\n    }\n  };\n\n  const handleTimeCodeEditKeyPress = (e, element) => {\n    if (e.key === ' ' || e.key === 'Spacebar') {\n      e.preventDefault();\n      handleTimeCodeEdit(element);\n    }\n  };\n\n  const findLongestSpeakerNameLength = (speakers) => {\n    let maxLength = 0;\n\n    speakers.forEach(speakerObj => {\n        if (speakerObj.speaker && speakerObj.speaker.length > maxLength) {\n            maxLength = speakerObj.speaker.length;\n        }\n    });\n\n    return maxLength > 17 ? 17 : maxLength + 1;\n  }\n\n  const DefaultElement = (props) => {\n    return <p {...props.attributes}>{props.children}</p>;\n  };\n\n  const handleTimedTextClick = (e) => {\n    if (e.target.classList.contains('timecode')) {\n      const start = e.target.dataset.start;\n      if (props.mediaRef && props.mediaRef.current) {\n        props.mediaRef.current.currentTime = parseFloat(start);\n        props.mediaRef.current.play();\n      }\n    } else if (e.target.dataset.slateString) {\n      if (e.target.parentNode.dataset.start) {\n        const start = e.target.parentNode.dataset.start;\n        if (props.mediaRef && props.mediaRef.current && start) {\n          props.mediaRef.current.currentTime = parseFloat(start);\n          props.mediaRef.current.play();\n        }\n      }\n    }\n  };\n\n  // TODO: refacto this function, to be cleaner and easier to follow.\n  const handleRestoreTimecodes = async (inlineTimecodes = false) => {\n    if (!isContentModified && !inlineTimecodes) {\n      return value;\n    }\n    if (inlineTimecodes) {\n      const transcriptData = insertTimecodesInline({ transcriptData: props.transcriptData });\n      const alignedSlateData = await updateTimestamps(convertDpeToSlate(transcriptData, props.sttType), transcriptData);\n      setValue(alignedSlateData);\n      setIsContentIsModified(false);\n      return alignedSlateData;\n    } else {\n      const alignedSlateData = await updateTimestamps(value, props.transcriptData);\n      setValue(alignedSlateData);\n      setIsContentIsModified(false);\n      return alignedSlateData;\n    }\n  };\n\n  const handleExport = async ({ type, ext, speakers, timecodes, inlineTimecodes, hideTitle, atlasFormat, isDownload }) => {\n    try {\n      setIsProcessing(true);\n      let tmpValue = getSlateContent();\n      if (timecodes) {\n        tmpValue = await handleRestoreTimecodes();\n      }\n\n      if (inlineTimecodes) {\n        tmpValue = await handleRestoreTimecodes(inlineTimecodes);\n      }\n\n  \n      //TODO: Handle update time codes\n      // if (isContentModified && type === 'json-slate') {\n      //   tmpValue = await handleRestoreTimecodes();\n      // }\n\n      let editorContnet = exportAdapter({\n        slateValue: tmpValue,\n        type,\n        transcriptTitle: getFileTitle(),\n        speakers,\n        timecodes,\n        inlineTimecodes,\n        hideTitle,\n        atlasFormat,\n        dpeTranscriptData: props.transcriptData,\n      });\n    \n      if (ext === 'json') {\n        editorContnet = JSON.stringify(editorContnet, null, 2);\n      }\n      if (ext !== 'docx' && isDownload) {\n        download(editorContnet, `${getFileTitle()}.${ext}`);\n      }\n      return editorContnet;\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      setIsProcessing(true);\n      const format = props.autoSaveContentType ? props.autoSaveContentType : 'digitalpaperedit';\n      handleExport({ type: `json-${format}`, isDownload: false })\n        .then(editorContent => {\n            if (props.handleSaveEditor) {\n                props.handleSaveEditor(editorContent);\n            }\n        });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleSaveAndClose = async () => {\n    try {\n      setIsProcessing(true);\n      const format = props.autoSaveContentType ? props.autoSaveContentType : 'digitalpaperedit';\n      handleExport({ type: `json-${format}`, isDownload: false })\n        .then(editorContent => {\n            if (props.handleSaveAndClose) {\n                props.handleSaveAndClose(editorContent);\n            }\n        });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  /**\n   * See explanation in `src/utils/dpe-to-slate/index.js` for how this function works with css injection\n   * to provide current paragaph's highlight.\n   * @param {Number} currentTime - float in seconds\n   */\n  // const generatePreviousTimingsUpToCurrent = (currentTime) => {\n  //   // edge case - empty transcription\n  //   if (isEmpty(props.transcriptData)) {\n  //     return '';\n  //   }\n  //   const lastWordStartTime = props.transcriptData.words[props.transcriptData.words.length - 1].start;\n  //   const lastWordStartTimeInt = parseInt(lastWordStartTime);\n  //   const emptyListOfTimes = Array(lastWordStartTimeInt);\n  //   const listOfTimesInt = [...emptyListOfTimes.keys()];\n  //   const listOfTimesUpToCurrentTimeInt = listOfTimesInt.splice(0, currentTime, 0);\n  //   const stringlistOfTimesUpToCurrentTimeInt = listOfTimesUpToCurrentTimeInt.join(' ');\n  //   return stringlistOfTimesUpToCurrentTimeInt;\n  // };\n\n  const handleSetPauseWhileTyping = () => {\n    setIsPauseWhiletyping(!isPauseWhiletyping);\n  };\n\n  const handleOnKeyDown = (event) => {\n    setIsContentIsModified(true);\n    if (isPauseWhiletyping) {\n      // logic for pause while typing\n      // https://schier.co/blog/wait-for-user-to-stop-typing-using-javascript\n      // TODO: currently eve the video was paused, and pause while typing is on,\n      // it will play it when stopped typing. so added btn to turn feature on off.\n      // and disabled as default.\n      // also pause while typing might introduce performance issues on longer transcripts\n      // if on every keystroke it's creating and destroing a timer.\n      // should find a more efficient way to \"debounce\" or \"throttle\" this functionality\n      if (props.mediaRef && props.mediaRef.current) {\n        props.mediaRef.current.pause();\n      }\n\n      if (saveTimer !== null) {\n        clearTimeout(saveTimer);\n      }\n\n      const tmpSaveTimer = setTimeout(() => {\n        if (props.mediaRef && props.mediaRef.current) {\n          props.mediaRef.current.play();\n        }\n      }, PAUSE_WHILTE_TYPING_TIMEOUT_MILLISECONDS);\n      setSaveTimer(tmpSaveTimer);\n    }\n  };\n\n  const handleTranscriptTitleEdit = (event) => {\n    if (event.keycode >= 37 && event.keycode <= 40) {\n      return;\n    }\n    if (event.keycode >= 13) {\n      event.preventDefault();\n      return; // Do not allow carriage return in transcript titles\n    }\n    props.handleSaveTranscriptTitle(event.target.innerHTML);\n  }\n\n  const handleReplaceOne = () => {\n    let children = editor.children;\n\n    for(let i = 0; i < children.length; i++) {\n      let text = children[i].children[0].text;\n      let newText = text.replace(findContent, replaceContent);\n      let newChild = JSON.parse(JSON.stringify(children[i]));\n      newChild.children[0].text = newText;\n\n      Transforms.insertNodes(\n        editor,\n        { ...newChild },\n        { at: [i] }\n      )\n\n      Transforms.removeNodes(editor, { at: [i+1] } );\n      if(text.includes(findContent)) {\n        return;\n      }\n    }\n  }\n\n  const handleReplaceAll = () => {\n    let children = editor.children;\n\n    for(let i = 0; i < children.length; i++) {\n      let text = children[i].children[0].text;\n      let newText = text.replaceAll(findContent, replaceContent);\n      let newChild = JSON.parse(JSON.stringify(children[i]));\n      newChild.children[0].text = newText;\n\n      Transforms.insertNodes(\n        editor,\n        { ...newChild },\n        { at: [i] }\n      )\n\n      Transforms.removeNodes(editor, { at: [i+1] } );\n    }\n  }\n\n  const handleTimeCodes = (event) => { \n    /*\n     When a paragraph is split, use the count of words in the original paragraph to calculate the duration of words using next\n     paragraph's start timecode and replace the new paragraph's start timecode with the new one.\n    */\n    if (event.keyCode === 13) { \n      const rangeForTheWholeEditor = Editor.range(editor, []);    \n      let nodes = editor.children;\n      for(let i = 0; i < nodes.length; i++) {\n        if (nodes[i - 1] && nodes[i].type === 'timedText' && nodes[i].start === nodes[i - 1].start && nodes[i].startTimecode === nodes[i - 1].startTimecode) {\n          let fullText = nodes[i - 1].children[0].text + nodes[i].children[0].text;\n          let words = fullText.split(' ');\n          let wordLength = words.length; \n          let duration = (nodes[i + 1]?.start || (nodes[i].start + nodes[i].children[0].text.split(' ').length * 0.5))  - nodes[i].start;\n          let wordDuration = duration / wordLength;\n          let newStart = nodes[i].start + wordDuration * nodes[i].children[0].text.split(' ').length;\n          let newTimecode = shortTimecode(newStart);\n\n          Transforms.setNodes(\n            editor,\n            { type: 'timedText', start: newStart, startTimecode: newTimecode },\n            {\n              at: rangeForTheWholeEditor,\n              match: (node) => node.type === 'timedText' && node.start === nodes[i].start && node.startTimecode === nodes[i].startTimecode && node.children[0].text === nodes[i].children[0].text\n            }\n          )\n        }\n      }\n    }\n  };\n\n  // Function to handle form submission\n  const handleUpdateDescription = () => {\n    props.saveMetadata({ description, language, isDownloadable, isCaption, isPublic });\n  };\n  \n  return (\n    <Container fluid style={{ backgroundColor: '#eee', height: '100vh', paddingTop: '1em' }}>\n      <style scoped>\n        {`\n              /* Next words */\n             .timecode[data-previous-timings*=\"${generatePreviousTimingsUpToCurrent(parseInt(currentTime), value)}\"]{\n                  color:  #9E9E9E;\n              }\n          `}\n      </style>\n      <style scoped>\n        {`.editor-wrapper-container{\n                padding: 8px 16px;\n                background: #f9f9f9;\n                box-shadow: 0 0 10px #ccc;\n                height: 90vh;\n                overflow: auto;\n              }\n              /* https://developer.mozilla.org/en-US/docs/Web/CSS/user-select\n              TODO: only working in Chrome, not working in Firefox, and Safari - OSX\n              if selecting text, not showing selection\n              Commented out because it means cannot select speakers and timecode anymore\n              which is the intended default behavior but needs to come with export\n              functionality to export as plain text, word etc.. otherwise user won't be able\n              to get text out of component with timecodes and speaker names in the interim */\n              .unselectable {\n                -moz-user-select: none;\n                -webkit-user-select: none;\n                -ms-user-select: none;\n                user-select: none;\n              }\n              .timecode:hover{\n                text-decoration: underline;\n              }\n              .timecode.text:hover{\n                text-decoration:none;\n              }\n              `}\n      </style>\n      <Row>\n        {props.showTitle ? (\n              <div className=\"text-truncate text-left top-title\">\n                  <span>Editing transcript </span>\n                  <OverlayTrigger\n                    placement={'bottom'}\n                    overlay={<Tooltip id=\"tooltip-disabled\">{`Click and edit to edit the transcript title and then hit save icon to save it`}</Tooltip>}\n                  >\n                    <span className='display-inline fw-bold editable' contentEditable={true} onBlur={handleTranscriptTitleEdit}>{props.title}</span> \n                  </OverlayTrigger>\n                  <span> of </span> \n                  <span className='display-inline fw-bold'>{props.resourceTitle}</span>\n              </div>\n        ) : null}\n        <div className='find-replace-container'>\n          <Form>\n            <Row>\n              <Col className='tl-right' xs={3} sm={3} md={3} lg={7} xl={8}>\n                <Form.Group controlId=\"findReplaceContentFields\">\n                  <Row>\n                    <Col>\n                      <Form.Control\n                        as=\"input\"\n                        value={findContent}\n                        placeholder='Find'\n                        onChange={(e) => setFindContent(e.target.value)}\n                      />\n                    </Col>\n                    <Col>\n                      <Form.Control\n                        as=\"input\"\n                        placeholder='Replace'\n                        value={replaceContent}\n                        onChange={(e) => setReplaceContent(e.target.value)}\n                      />\n                    </Col>\n                  </Row>\n                </Form.Group>\n              </Col>\n              <Col className='tl-right' xs={3} sm={3} md={3} lg={4} xl={4}>\n                <Row>\n                  <Col className='pl-0 pr-0'>\n                    <Button variant=\"primary\" onClick={handleReplaceOne} className='btn-update-description replace-btn'>\n                      Replace One\n                    </Button>\n                  </Col>\n                  <Col className='pl-0'>\n                    <Button variant=\"primary\" onClick={handleReplaceAll} className='btn-update-description replace-btn'>\n                      Replace All\n                    </Button>\n                  </Col>\n                  </Row>\n              </Col>\n            </Row>\n          </Form>\n        </div>\n      </Row>\n\n      <Row>\n        <Col\n          xs={{ span: 12, order: 1 }}\n          sm={getMediaType() === 'audio' ? { span: 10, offset: 1 } : 3}\n          md={getMediaType() === 'audio' ? { span: 10, offset: 1 } : 3}\n          lg={getMediaType() === 'audio' ? { span: 8, offset: 2 } : 3}\n          xl={getMediaType() === 'audio' ? { span: 8, offset: 2 } : 3}\n          className=\"d-flex flex-column\"\n        >\n          <Row>\n            <MediaComponent\n              mediaRef={props.mediaRef}\n              mediaUrl={props.mediaUrl}\n              width={'100%'}\n              height={getMediaType() === 'audio' ? '60em' : 'auto'}\n              controls\n              playsInline\n            ></MediaComponent>\n          </Row>\n          <Row>\n            <Col xs={5} sm={1} md={1} lg={1} xl={2} className={'pt-1 pl-0'}>\n              <Button variant=\"primary\" onClick={handleSaveAndClose} className='btn-update-description save-close-btn'>\n                Save & Close\n              </Button>\n            </Col>\n            <Col xs={4} sm={2} md={2} lg={2} xl={2} className={'p-1 ml-auto'} style={{marginRight: '5px'}}>\n              <Form.Control\n                as=\"select\"\n                defaultValue={playbackRate}\n                onChange={handleSetPlaybackRate}\n                title={'Change the playback speed of the player'}\n                className={'p-0'}\n              >\n                {PLAYBACK_RATE_VALUES.map((playbackRateValue, index) => {\n                  return (\n                    <option key={index + playbackRateValue} value={playbackRateValue}>\n                      x {playbackRateValue}\n                    </option>\n                  );\n                })}\n              </Form.Control>\n            </Col>\n            <Col xs={3} sm={3} md={3} lg={2} xl={1} className={'p-1'}>\n              <OverlayTrigger\n                delay={TOOTLIP_DELAY}\n                placement={'bottom'}\n                overlay={<Tooltip id=\"tooltip-disabled\">{`Seek back by ${SEEK_BACK_SEC} seconds`}</Tooltip>}\n              >\n                <span className=\"d-inline-block\">\n                  <Button variant=\"light\" onClick={handleSeekBack} block className='fs-17'>\n                    <FontAwesomeIcon icon={faUndo} />\n                  </Button>\n                </span>\n              </OverlayTrigger>\n            </Col>\n            <Col xs={3} sm={3} md={3} lg={2} xl={1} className={'p-1'} style={{marginLeft: '15px'}}>\n                <OverlayTrigger\n                  OverlayTrigger\n                  delay={TOOTLIP_LONGER_DELAY}\n                  placement={'bottom'}\n                  overlay={<Tooltip id=\"tooltip-disabled\">Export options</Tooltip>}\n                >\n                  <span className=\"d-inline-block\">\n                    <DropdownButton\n                      disabled={isProcessing}\n                      id=\"dropdown-basic-button\"\n                      title={<FontAwesomeIcon icon={faFileDownload} />}\n                      variant=\"light\"\n                    >\n                      {/* TODO: need to run re-alignement if exportin with timecodes true, otherwise they'll be inaccurate */}\n                      <Dropdown.Item style={{ color: 'black' }} disabled>\n                        <b>Text Export</b>\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        onClick={() => {\n                          handleExport({\n                            type: 'text',\n                            ext: 'txt',\n                            speakers: false,\n                            timecodes: false,\n                            isDownload: true,\n                          });\n                        }}\n                      >\n                        Text (<code>.txt</code>)\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        onClick={() => {\n                          handleExport({\n                            type: 'text',\n                            ext: 'txt',\n                            speakers: true,\n                            timecodes: false,\n                            isDownload: true,\n                          });\n                        }}\n                      >\n                        Text (Speakers)\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        onClick={() => {\n                          handleExport({\n                            type: 'text',\n                            ext: 'txt',\n                            speakers: false,\n                            timecodes: true,\n                            isDownload: true,\n                          });\n                        }}\n                      >\n                        Text (Timecodes)\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        onClick={() => {\n                          handleExport({\n                            type: 'text',\n                            ext: 'txt',\n                            speakers: true,\n                            timecodes: true,\n                            isDownload: true,\n                          });\n                        }}\n                        disable\n                      >\n                        Text (Speakers & Timecodes)\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        onClick={() => {\n                          handleExport({\n                            type: 'text',\n                            ext: 'txt',\n                            speakers: true,\n                            timecodes: true,\n                            atlasFormat: true,\n                            isDownload: true,\n                          });\n                        }}\n                        disable\n                      >\n                        Text (Atlas format)\n                      </Dropdown.Item>\n                      {/* TODO: need to run re-alignement if exportin with timecodes true */}\n                      <Dropdown.Divider />\n                      <Dropdown.Item\n                        onClick={() => {\n                          handleExport({\n                            type: 'word',\n                            ext: 'docx',\n                            speakers: false,\n                            timecodes: false,\n                            isDownload: true,\n                          });\n                        }}\n                      >\n                        Word (<code>.docx</code>)\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        onClick={() => {\n                          handleExport({\n                            type: 'word',\n                            ext: 'docx',\n                            speakers: true,\n                            timecodes: false,\n                            isDownload: true,\n                          });\n                        }}\n                      >\n                        Word (Speakers)\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        onClick={() => {\n                          handleExport({\n                            type: 'word',\n                            ext: 'docx',\n                            speakers: false,\n                            timecodes: true,\n                            isDownload: true,\n                          });\n                        }}\n                      >\n                        Word (Timecodes)\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        onClick={() => {\n                          handleExport({\n                            type: 'word',\n                            ext: 'docx',\n                            speakers: true,\n                            timecodes: true,\n                            isDownload: true,\n                          });\n                        }}\n                      >\n                        Word (Speakers & Timecodes)\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        onClick={() => {\n                          handleExport({\n                            type: 'word',\n                            ext: 'docx',\n                            speakers: false,\n                            timecodes: false,\n                            inlineTimecodes: true,\n                            hideTitle: true,\n                          });\n                        }}\n                      >\n                        Word (OHMS)\n                      </Dropdown.Item>\n                      <Dropdown.Divider />\n\n                      <Dropdown.Item style={{ color: 'black' }} disabled>\n                        <b>Closed Captions Export</b>\n                      </Dropdown.Item>\n                      {subtitlesExportOptionsList.map(({ type, label, ext }, index) => {\n                        return (\n                          <Dropdown.Item\n                            key={index + label}\n                            onClick={() => {\n                              handleExport({ type, ext, isDownload: true });\n                            }}\n                          >\n                            {label} (<code>.{ext}</code>)\n                          </Dropdown.Item>\n                        );\n                      })}\n                    </DropdownButton>\n                  </span>\n                </OverlayTrigger>\n            </Col>\n            <Col xs={3} sm={3} md={3} lg={2} xl={1} className={'p-1'} style={{marginLeft: '21px'}}>\n              <OverlayTrigger\n                OverlayTrigger\n                delay={TOOTLIP_LONGER_DELAY}\n                placement={'bottom'}\n                overlay={<Tooltip id=\"tooltip-disabled\">Save</Tooltip>}\n              >\n                <Button disabled={isProcessing} onClick={handleSave} variant=\"light\" className='fs-17'>\n                  <FontAwesomeIcon icon={faSave} />\n                </Button>\n              </OverlayTrigger>\n            </Col>\n            <Col xs={3} sm={3} md={3} lg={2} xl={1} className={'p-1'} style={{marginLeft: '10px'}}>\n              <OverlayTrigger\n                delay={TOOTLIP_DELAY}\n                placement={'bottom'}\n                overlay={\n                  <Tooltip id=\"tooltip-disabled\">\n                    Turn {isPauseWhiletyping ? 'off' : 'on'} pause while typing functionality. As you start typing the media while pause playback\n                    until you stop. Not reccomended on longer transcript as it might present performance issues.\n                  </Tooltip>\n                }\n              >\n                <Button disabled={isProcessing} onClick={handleSetPauseWhileTyping} variant={isPauseWhiletyping ? 'secondary' : 'light'} className='fs-17'>\n                  <FontAwesomeIcon icon={faPause} />\n                </Button>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n          <Row className='flex-grow-1 align-items-end'>\n            <Col className='p-0 d-flex flex-column'>\n              <div className='metadata-editor-container'>\n                <Tabs defaultActiveKey=\"description\" id=\"tabs\">\n                  <Tab eventKey=\"description\" title=\"Description\">\n                    <Form className='pt-3 flex-grow-1'>\n                      <Form.Group controlId=\"descriptionField\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control\n                          as=\"textarea\"\n                          rows={3}\n                          value={description}\n                          onChange={(e) => setDescription(e.target.value)}\n                          style={{ resize: 'none' }}\n                        />\n                      </Form.Group>\n\n                      <Form.Group controlId=\"languageDropdown\">\n                        <Form.Label>Language</Form.Label>\n                        <Form.Control\n                          as=\"select\"\n                          value={language}\n                          onChange={(e) => setLanguage(e.target.value)}\n                        >\n                          {Object.keys(languagesArray).map((code) => (\n                            <option key={code} value={code}>\n                              {languagesArray[code]}\n                            </option>\n                          ))}\n                        </Form.Control>\n                      </Form.Group>\n\n                      <Form.Group controlId=\"publicDropdown\">\n                        <Form.Label>Public</Form.Label>\n                        <Form.Control\n                          as=\"select\"\n                          value={isPublic}\n                          onChange={(e) => setIsPublic(e.target.value)}\n                        >\n                          <option value='true'>Yes</option>\n                          <option value='false'>No</option>\n                        </Form.Control>\n                      </Form.Group>\n\n                      <Form.Group controlId=\"captionCheckbox\" className='custom-checkbox'>\n                        <Form.Check\n                          type=\"checkbox\"\n                          label=\"Is Caption?\"\n                          checked={isCaption}\n                          onChange={(e) => setIsCaption(e.target.checked)}\n                          className='custom-checkbox-input'\n                        />\n                      </Form.Group>\n\n                      <Form.Group controlId=\"downloadableCheckbox\" className='custom-checkbox'>\n                        <Form.Check\n                          type=\"checkbox\"\n                          label=\"Is Downloadable?\"\n                          checked={isDownloadable}\n                          onChange={(e) => setIsDownloadable(e.target.checked)}\n                          className='custom-checkbox-input'\n                        />\n                      </Form.Group>\n                      <div className='d-flex align-items-end justify-content-end'>\n                        <Button variant=\"primary\" onClick={handleUpdateDescription} className='btn-update-description mt-10-vh'>\n                          Update Description\n                        </Button>\n                      </div>\n                    </Form>\n                  </Tab>\n                  <Tab eventKey=\"annotations\" title=\"Annotations\">\n                    {/* Left for implementation */}\n                    <p>Coming soon...</p>\n                  </Tab>\n                </Tabs>\n              </div>\n            </Col>\n          </Row>\n        </Col>\n        <Col\n          xs={{ span: 12, order: 3 }}\n          sm={getMediaType() === 'audio' ? { span: 10, order: 2, offset: 1 } : { span: 9, order: 2 }}\n          md={getMediaType() === 'audio' ? { span: 10, order: 2, offset: 1 } : { span: 9, order: 2 }}\n          lg={getMediaType() === 'audio' ? { span: 8, order: 2, offset: 2 } : { span: 9, order: 2 }}\n          xl={getMediaType() === 'audio' ? { span: 8, order: 2, offset: 2 } : { span: 9, order: 2 }}\n        >\n          {value.length !== 0 ? (\n            <>\n              <section className=\"editor-wrapper-container\">\n                <Slate\n                  editor={editor}\n                  value={value}\n                  onChange={(value) => {\n                    return setValue(value);\n                  }}\n                >\n                  <Editable\n                    readOnly={typeof props.isEditable === 'boolean' ? !props.isEditable : false}\n                    renderElement={renderElement}\n                    renderLeaf={Leaf}\n                    onKeyDown={handleOnKeyDown}\n                    onKeyUp={handleTimeCodes}\n                    decorate={decorate}\n                  />\n                  </Slate>\n              </section>\n            </>\n          ) : (\n            <section className=\"text-center\">\n              <i className=\"text-center\">Loading...</i>\n            </section>\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nSlateTranscriptEditor.propTypes = {\n  transcriptData: PropTypes.object.isRequired,\n  mediaUrl: PropTypes.string.isRequired,\n  handleSaveEditor: PropTypes.func,\n  handleSaveAndClose: PropTypes.func,\n  handleAutoSaveChanges: PropTypes.func,\n  autoSaveContentType: PropTypes.string,\n  isEditable: PropTypes.bool,\n  showTimecodes: PropTypes.bool,\n  showSpeakers: PropTypes.bool,\n  title: PropTypes.string,\n  resourceTitle: PropTypes.string,\n  handleSaveTranscriptTitle: PropTypes.func,\n  showTitle: PropTypes.bool,\n  mediaType: PropTypes.string,\n  transcriptDataLive: PropTypes.object,\n  mediaRef: PropTypes.object,\n  sttType: PropTypes.string,\n  saveMetadata: PropTypes.func,\n  metadata: PropTypes.object,\n};\n\nSlateTranscriptEditor.defaultProps = {\n  showTitle: false,\n  showTimecodes: true,\n  showSpeakers: true,\n  mediaType: 'digitalpaperedit',\n  isEditable: true,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport SlateTranscriptEditor from './components/index.js';\nimport { secondsToTimecode, timecodeToSeconds, shortTimecode } from './util/timecode-converter/index.js';\nimport convertDpeToSlate from './util/dpe-to-slate/index.js';\nimport converSlateToDpe from './util/export-adapters/slate-to-dpe/index.js';\nimport slateToText from './util/export-adapters/txt';\n\nexport default SlateTranscriptEditor;\n\nexport { SlateTranscriptEditor, secondsToTimecode, timecodeToSeconds, shortTimecode, convertDpeToSlate, converSlateToDpe, slateToText };\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}